/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./node_modules/@meilisearch/instant-meilisearch/dist/instant-meilisearch.umd.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@meilisearch/instant-meilisearch/dist/instant-meilisearch.umd.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("(function (global, factory) {\n     true ? factory(exports) :\n    0;\n}(this, (function (exports) { 'use strict';\n\n    /******************************************************************************\r\n    Copyright (c) Microsoft Corporation.\r\n\r\n    Permission to use, copy, modify, and/or distribute this software for any\r\n    purpose with or without fee is hereby granted.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n    PERFORMANCE OF THIS SOFTWARE.\r\n    ***************************************************************************** */\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __spreadArray(to, from, pack) {\r\n        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n            if (ar || !(i in from)) {\r\n                if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n                ar[i] = from[i];\r\n            }\r\n        }\r\n        return to.concat(ar || Array.prototype.slice.call(from));\r\n    }\n\n    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof self !== 'undefined' ? self : {};\n\n    function createCommonjsModule(fn) {\n      var module = { exports: {} };\n    \treturn fn(module, module.exports), module.exports;\n    }\n\n    var browserPolyfill = createCommonjsModule(function (module) {\n      (function (self) {\n        (function (exports) {\n          var support = {\n            searchParams: 'URLSearchParams' in self,\n            iterable: 'Symbol' in self && 'iterator' in Symbol,\n            blob: 'FileReader' in self && 'Blob' in self && function () {\n              try {\n                new Blob();\n                return true;\n              } catch (e) {\n                return false;\n              }\n            }(),\n            formData: 'FormData' in self,\n            arrayBuffer: 'ArrayBuffer' in self\n          };\n          function isDataView(obj) {\n            return obj && DataView.prototype.isPrototypeOf(obj);\n          }\n          if (support.arrayBuffer) {\n            var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];\n            var isArrayBufferView = ArrayBuffer.isView || function (obj) {\n              return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;\n            };\n          }\n          function normalizeName(name) {\n            if (typeof name !== 'string') {\n              name = String(name);\n            }\n            if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n              throw new TypeError('Invalid character in header field name');\n            }\n            return name.toLowerCase();\n          }\n          function normalizeValue(value) {\n            if (typeof value !== 'string') {\n              value = String(value);\n            }\n            return value;\n          }\n\n          // Build a destructive iterator for the value list\n          function iteratorFor(items) {\n            var iterator = {\n              next: function () {\n                var value = items.shift();\n                return {\n                  done: value === undefined,\n                  value: value\n                };\n              }\n            };\n            if (support.iterable) {\n              iterator[Symbol.iterator] = function () {\n                return iterator;\n              };\n            }\n            return iterator;\n          }\n          function Headers(headers) {\n            this.map = {};\n            if (headers instanceof Headers) {\n              headers.forEach(function (value, name) {\n                this.append(name, value);\n              }, this);\n            } else if (Array.isArray(headers)) {\n              headers.forEach(function (header) {\n                this.append(header[0], header[1]);\n              }, this);\n            } else if (headers) {\n              Object.getOwnPropertyNames(headers).forEach(function (name) {\n                this.append(name, headers[name]);\n              }, this);\n            }\n          }\n          Headers.prototype.append = function (name, value) {\n            name = normalizeName(name);\n            value = normalizeValue(value);\n            var oldValue = this.map[name];\n            this.map[name] = oldValue ? oldValue + ', ' + value : value;\n          };\n          Headers.prototype['delete'] = function (name) {\n            delete this.map[normalizeName(name)];\n          };\n          Headers.prototype.get = function (name) {\n            name = normalizeName(name);\n            return this.has(name) ? this.map[name] : null;\n          };\n          Headers.prototype.has = function (name) {\n            return this.map.hasOwnProperty(normalizeName(name));\n          };\n          Headers.prototype.set = function (name, value) {\n            this.map[normalizeName(name)] = normalizeValue(value);\n          };\n          Headers.prototype.forEach = function (callback, thisArg) {\n            for (var name in this.map) {\n              if (this.map.hasOwnProperty(name)) {\n                callback.call(thisArg, this.map[name], name, this);\n              }\n            }\n          };\n          Headers.prototype.keys = function () {\n            var items = [];\n            this.forEach(function (value, name) {\n              items.push(name);\n            });\n            return iteratorFor(items);\n          };\n          Headers.prototype.values = function () {\n            var items = [];\n            this.forEach(function (value) {\n              items.push(value);\n            });\n            return iteratorFor(items);\n          };\n          Headers.prototype.entries = function () {\n            var items = [];\n            this.forEach(function (value, name) {\n              items.push([name, value]);\n            });\n            return iteratorFor(items);\n          };\n          if (support.iterable) {\n            Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n          }\n          function consumed(body) {\n            if (body.bodyUsed) {\n              return Promise.reject(new TypeError('Already read'));\n            }\n            body.bodyUsed = true;\n          }\n          function fileReaderReady(reader) {\n            return new Promise(function (resolve, reject) {\n              reader.onload = function () {\n                resolve(reader.result);\n              };\n              reader.onerror = function () {\n                reject(reader.error);\n              };\n            });\n          }\n          function readBlobAsArrayBuffer(blob) {\n            var reader = new FileReader();\n            var promise = fileReaderReady(reader);\n            reader.readAsArrayBuffer(blob);\n            return promise;\n          }\n          function readBlobAsText(blob) {\n            var reader = new FileReader();\n            var promise = fileReaderReady(reader);\n            reader.readAsText(blob);\n            return promise;\n          }\n          function readArrayBufferAsText(buf) {\n            var view = new Uint8Array(buf);\n            var chars = new Array(view.length);\n            for (var i = 0; i < view.length; i++) {\n              chars[i] = String.fromCharCode(view[i]);\n            }\n            return chars.join('');\n          }\n          function bufferClone(buf) {\n            if (buf.slice) {\n              return buf.slice(0);\n            } else {\n              var view = new Uint8Array(buf.byteLength);\n              view.set(new Uint8Array(buf));\n              return view.buffer;\n            }\n          }\n          function Body() {\n            this.bodyUsed = false;\n            this._initBody = function (body) {\n              this._bodyInit = body;\n              if (!body) {\n                this._bodyText = '';\n              } else if (typeof body === 'string') {\n                this._bodyText = body;\n              } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n                this._bodyBlob = body;\n              } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n                this._bodyFormData = body;\n              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n                this._bodyText = body.toString();\n              } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n                this._bodyArrayBuffer = bufferClone(body.buffer);\n                // IE 10-11 can't handle a DataView body.\n                this._bodyInit = new Blob([this._bodyArrayBuffer]);\n              } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n                this._bodyArrayBuffer = bufferClone(body);\n              } else {\n                this._bodyText = body = Object.prototype.toString.call(body);\n              }\n              if (!this.headers.get('content-type')) {\n                if (typeof body === 'string') {\n                  this.headers.set('content-type', 'text/plain;charset=UTF-8');\n                } else if (this._bodyBlob && this._bodyBlob.type) {\n                  this.headers.set('content-type', this._bodyBlob.type);\n                } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n                  this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n                }\n              }\n            };\n            if (support.blob) {\n              this.blob = function () {\n                var rejected = consumed(this);\n                if (rejected) {\n                  return rejected;\n                }\n                if (this._bodyBlob) {\n                  return Promise.resolve(this._bodyBlob);\n                } else if (this._bodyArrayBuffer) {\n                  return Promise.resolve(new Blob([this._bodyArrayBuffer]));\n                } else if (this._bodyFormData) {\n                  throw new Error('could not read FormData body as blob');\n                } else {\n                  return Promise.resolve(new Blob([this._bodyText]));\n                }\n              };\n              this.arrayBuffer = function () {\n                if (this._bodyArrayBuffer) {\n                  return consumed(this) || Promise.resolve(this._bodyArrayBuffer);\n                } else {\n                  return this.blob().then(readBlobAsArrayBuffer);\n                }\n              };\n            }\n            this.text = function () {\n              var rejected = consumed(this);\n              if (rejected) {\n                return rejected;\n              }\n              if (this._bodyBlob) {\n                return readBlobAsText(this._bodyBlob);\n              } else if (this._bodyArrayBuffer) {\n                return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));\n              } else if (this._bodyFormData) {\n                throw new Error('could not read FormData body as text');\n              } else {\n                return Promise.resolve(this._bodyText);\n              }\n            };\n            if (support.formData) {\n              this.formData = function () {\n                return this.text().then(decode);\n              };\n            }\n            this.json = function () {\n              return this.text().then(JSON.parse);\n            };\n            return this;\n          }\n\n          // HTTP methods whose capitalization should be normalized\n          var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n          function normalizeMethod(method) {\n            var upcased = method.toUpperCase();\n            return methods.indexOf(upcased) > -1 ? upcased : method;\n          }\n          function Request(input, options) {\n            options = options || {};\n            var body = options.body;\n            if (input instanceof Request) {\n              if (input.bodyUsed) {\n                throw new TypeError('Already read');\n              }\n              this.url = input.url;\n              this.credentials = input.credentials;\n              if (!options.headers) {\n                this.headers = new Headers(input.headers);\n              }\n              this.method = input.method;\n              this.mode = input.mode;\n              this.signal = input.signal;\n              if (!body && input._bodyInit != null) {\n                body = input._bodyInit;\n                input.bodyUsed = true;\n              }\n            } else {\n              this.url = String(input);\n            }\n            this.credentials = options.credentials || this.credentials || 'same-origin';\n            if (options.headers || !this.headers) {\n              this.headers = new Headers(options.headers);\n            }\n            this.method = normalizeMethod(options.method || this.method || 'GET');\n            this.mode = options.mode || this.mode || null;\n            this.signal = options.signal || this.signal;\n            this.referrer = null;\n            if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n              throw new TypeError('Body not allowed for GET or HEAD requests');\n            }\n            this._initBody(body);\n          }\n          Request.prototype.clone = function () {\n            return new Request(this, {\n              body: this._bodyInit\n            });\n          };\n          function decode(body) {\n            var form = new FormData();\n            body.trim().split('&').forEach(function (bytes) {\n              if (bytes) {\n                var split = bytes.split('=');\n                var name = split.shift().replace(/\\+/g, ' ');\n                var value = split.join('=').replace(/\\+/g, ' ');\n                form.append(decodeURIComponent(name), decodeURIComponent(value));\n              }\n            });\n            return form;\n          }\n          function parseHeaders(rawHeaders) {\n            var headers = new Headers();\n            // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n            // https://tools.ietf.org/html/rfc7230#section-3.2\n            var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n            preProcessedHeaders.split(/\\r?\\n/).forEach(function (line) {\n              var parts = line.split(':');\n              var key = parts.shift().trim();\n              if (key) {\n                var value = parts.join(':').trim();\n                headers.append(key, value);\n              }\n            });\n            return headers;\n          }\n          Body.call(Request.prototype);\n          function Response(bodyInit, options) {\n            if (!options) {\n              options = {};\n            }\n            this.type = 'default';\n            this.status = options.status === undefined ? 200 : options.status;\n            this.ok = this.status >= 200 && this.status < 300;\n            this.statusText = 'statusText' in options ? options.statusText : 'OK';\n            this.headers = new Headers(options.headers);\n            this.url = options.url || '';\n            this._initBody(bodyInit);\n          }\n          Body.call(Response.prototype);\n          Response.prototype.clone = function () {\n            return new Response(this._bodyInit, {\n              status: this.status,\n              statusText: this.statusText,\n              headers: new Headers(this.headers),\n              url: this.url\n            });\n          };\n          Response.error = function () {\n            var response = new Response(null, {\n              status: 0,\n              statusText: ''\n            });\n            response.type = 'error';\n            return response;\n          };\n          var redirectStatuses = [301, 302, 303, 307, 308];\n          Response.redirect = function (url, status) {\n            if (redirectStatuses.indexOf(status) === -1) {\n              throw new RangeError('Invalid status code');\n            }\n            return new Response(null, {\n              status: status,\n              headers: {\n                location: url\n              }\n            });\n          };\n          exports.DOMException = self.DOMException;\n          try {\n            new exports.DOMException();\n          } catch (err) {\n            exports.DOMException = function (message, name) {\n              this.message = message;\n              this.name = name;\n              var error = Error(message);\n              this.stack = error.stack;\n            };\n            exports.DOMException.prototype = Object.create(Error.prototype);\n            exports.DOMException.prototype.constructor = exports.DOMException;\n          }\n          function fetch(input, init) {\n            return new Promise(function (resolve, reject) {\n              var request = new Request(input, init);\n              if (request.signal && request.signal.aborted) {\n                return reject(new exports.DOMException('Aborted', 'AbortError'));\n              }\n              var xhr = new XMLHttpRequest();\n              function abortXhr() {\n                xhr.abort();\n              }\n              xhr.onload = function () {\n                var options = {\n                  status: xhr.status,\n                  statusText: xhr.statusText,\n                  headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n                };\n                options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n                var body = 'response' in xhr ? xhr.response : xhr.responseText;\n                resolve(new Response(body, options));\n              };\n              xhr.onerror = function () {\n                reject(new TypeError('Network request failed'));\n              };\n              xhr.ontimeout = function () {\n                reject(new TypeError('Network request failed'));\n              };\n              xhr.onabort = function () {\n                reject(new exports.DOMException('Aborted', 'AbortError'));\n              };\n              xhr.open(request.method, request.url, true);\n              if (request.credentials === 'include') {\n                xhr.withCredentials = true;\n              } else if (request.credentials === 'omit') {\n                xhr.withCredentials = false;\n              }\n              if ('responseType' in xhr && support.blob) {\n                xhr.responseType = 'blob';\n              }\n              request.headers.forEach(function (value, name) {\n                xhr.setRequestHeader(name, value);\n              });\n              if (request.signal) {\n                request.signal.addEventListener('abort', abortXhr);\n                xhr.onreadystatechange = function () {\n                  // DONE (success or failure)\n                  if (xhr.readyState === 4) {\n                    request.signal.removeEventListener('abort', abortXhr);\n                  }\n                };\n              }\n              xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n            });\n          }\n          fetch.polyfill = true;\n          if (!self.fetch) {\n            self.fetch = fetch;\n            self.Headers = Headers;\n            self.Request = Request;\n            self.Response = Response;\n          }\n          exports.Headers = Headers;\n          exports.Request = Request;\n          exports.Response = Response;\n          exports.fetch = fetch;\n          Object.defineProperty(exports, '__esModule', {\n            value: true\n          });\n          return exports;\n        })({});\n      })(typeof self !== 'undefined' ? self : commonjsGlobal);\n    });\n\n    var meilisearch_umd = createCommonjsModule(function (module, exports) {\n      (function (global, factory) {\n        factory(exports, browserPolyfill) ;\n      })(commonjsGlobal, function (exports) {\n\n        // Type definitions for meilisearch\n        // Project: https://github.com/meilisearch/meilisearch-js\n        // Definitions by: qdequele <quentin@meilisearch.com> <https://github.com/meilisearch>\n        // Definitions: https://github.com/meilisearch/meilisearch-js\n        // TypeScript Version: ^3.8.3\n\n        /*\r\n         * SEARCH PARAMETERS\r\n         */\n        var MatchingStrategies = {\n          ALL: 'all',\n          LAST: 'last'\n        };\n\n        /******************************************************************************\r\n        Copyright (c) Microsoft Corporation.\r\n          Permission to use, copy, modify, and/or distribute this software for any\r\n        purpose with or without fee is hereby granted.\r\n          THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n        REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n        AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n        INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n        LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n        OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n        PERFORMANCE OF THIS SOFTWARE.\r\n        ***************************************************************************** */\n        /* global Reflect, Promise */\n\n        var extendStatics = function (d, b) {\n          extendStatics = Object.setPrototypeOf || {\n            __proto__: []\n          } instanceof Array && function (d, b) {\n            d.__proto__ = b;\n          } || function (d, b) {\n            for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n          };\n          return extendStatics(d, b);\n        };\n        function __extends(d, b) {\n          if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n          extendStatics(d, b);\n          function __() {\n            this.constructor = d;\n          }\n          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        }\n        var __assign = function () {\n          __assign = Object.assign || function __assign(t) {\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\n              s = arguments[i];\n              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n            }\n            return t;\n          };\n          return __assign.apply(this, arguments);\n        };\n        function __awaiter(thisArg, _arguments, P, generator) {\n          function adopt(value) {\n            return value instanceof P ? value : new P(function (resolve) {\n              resolve(value);\n            });\n          }\n          return new (P || (P = Promise))(function (resolve, reject) {\n            function fulfilled(value) {\n              try {\n                step(generator.next(value));\n              } catch (e) {\n                reject(e);\n              }\n            }\n            function rejected(value) {\n              try {\n                step(generator[\"throw\"](value));\n              } catch (e) {\n                reject(e);\n              }\n            }\n            function step(result) {\n              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n            }\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\n          });\n        }\n        function __generator(thisArg, body) {\n          var _ = {\n              label: 0,\n              sent: function () {\n                if (t[0] & 1) throw t[1];\n                return t[1];\n              },\n              trys: [],\n              ops: []\n            },\n            f,\n            y,\n            t,\n            g;\n          return g = {\n            next: verb(0),\n            \"throw\": verb(1),\n            \"return\": verb(2)\n          }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n            return this;\n          }), g;\n          function verb(n) {\n            return function (v) {\n              return step([n, v]);\n            };\n          }\n          function step(op) {\n            if (f) throw new TypeError(\"Generator is already executing.\");\n            while (_) try {\n              if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n              if (y = 0, t) op = [op[0] & 2, t.value];\n              switch (op[0]) {\n                case 0:\n                case 1:\n                  t = op;\n                  break;\n                case 4:\n                  _.label++;\n                  return {\n                    value: op[1],\n                    done: false\n                  };\n                case 5:\n                  _.label++;\n                  y = op[1];\n                  op = [0];\n                  continue;\n                case 7:\n                  op = _.ops.pop();\n                  _.trys.pop();\n                  continue;\n                default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                    _ = 0;\n                    continue;\n                  }\n                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                    _.label = op[1];\n                    break;\n                  }\n                  if (op[0] === 6 && _.label < t[1]) {\n                    _.label = t[1];\n                    t = op;\n                    break;\n                  }\n                  if (t && _.label < t[2]) {\n                    _.label = t[2];\n                    _.ops.push(op);\n                    break;\n                  }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop();\n                  continue;\n              }\n              op = body.call(thisArg, _);\n            } catch (e) {\n              op = [6, e];\n              y = 0;\n            } finally {\n              f = t = 0;\n            }\n            if (op[0] & 5) throw op[1];\n            return {\n              value: op[0] ? op[1] : void 0,\n              done: true\n            };\n          }\n        }\n        var MeiliSearchCommunicationError = /** @class */\n        function (_super) {\n          __extends(MeiliSearchCommunicationError, _super);\n          function MeiliSearchCommunicationError(message, body, url, stack) {\n            var _this = this;\n            var _a, _b, _c;\n            _this = _super.call(this, message) || this; // Make errors comparison possible. ex: error instanceof MeiliSearchCommunicationError.\n\n            Object.setPrototypeOf(_this, MeiliSearchCommunicationError.prototype);\n            _this.name = 'MeiliSearchCommunicationError';\n            if (body instanceof Response) {\n              _this.message = body.statusText;\n              _this.statusCode = body.status;\n            }\n            if (body instanceof Error) {\n              _this.errno = body.errno;\n              _this.code = body.code;\n            }\n            if (stack) {\n              _this.stack = stack;\n              _this.stack = (_a = _this.stack) === null || _a === void 0 ? void 0 : _a.replace(/(TypeError|FetchError)/, _this.name);\n              _this.stack = (_b = _this.stack) === null || _b === void 0 ? void 0 : _b.replace('Failed to fetch', \"request to \".concat(url, \" failed, reason: connect ECONNREFUSED\"));\n              _this.stack = (_c = _this.stack) === null || _c === void 0 ? void 0 : _c.replace('Not Found', \"Not Found: \".concat(url));\n            } else {\n              if (Error.captureStackTrace) {\n                Error.captureStackTrace(_this, MeiliSearchCommunicationError);\n              }\n            }\n            return _this;\n          }\n          return MeiliSearchCommunicationError;\n        }(Error);\n        var MeiliSearchApiError = /** @class */\n        function (_super) {\n          __extends(class_1, _super);\n          function class_1(error, status) {\n            var _this = _super.call(this, error.message) || this; // Make errors comparison possible. ex: error instanceof MeiliSearchApiError.\n\n            Object.setPrototypeOf(_this, MeiliSearchApiError.prototype);\n            _this.name = 'MeiliSearchApiError';\n            _this.code = error.code;\n            _this.type = error.type;\n            _this.link = error.link;\n            _this.message = error.message;\n            _this.httpStatus = status;\n            if (Error.captureStackTrace) {\n              Error.captureStackTrace(_this, MeiliSearchApiError);\n            }\n            return _this;\n          }\n          return class_1;\n        }(Error);\n        function httpResponseErrorHandler(response) {\n          return __awaiter(this, void 0, void 0, function () {\n            var responseBody;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  if (!!response.ok) return [3\n                  /*break*/, 5];\n                  responseBody = void 0;\n                  _a.label = 1;\n                case 1:\n                  _a.trys.push([1, 3,, 4]);\n                  return [4\n                  /*yield*/, response.json()];\n                case 2:\n                  // If it is not possible to parse the return body it means there is none\n                  // In which case it is a communication error with the Meilisearch instance\n                  responseBody = _a.sent();\n                  return [3\n                  /*break*/, 4];\n                case 3:\n                  _a.sent(); // Not sure on how to test this part of the code.\n\n                  throw new MeiliSearchCommunicationError(response.statusText, response, response.url);\n                case 4:\n                  // If the body is parsable, then it means Meilisearch returned a body with\n                  // information on the error.\n                  throw new MeiliSearchApiError(responseBody, response.status);\n                case 5:\n                  return [2\n                  /*return*/, response];\n              }\n            });\n          });\n        }\n        function httpErrorHandler(response, stack, url) {\n          if (response.name !== 'MeiliSearchApiError') {\n            throw new MeiliSearchCommunicationError(response.message, response, url, stack);\n          }\n          throw response;\n        }\n        var MeiliSearchError = /** @class */\n        function (_super) {\n          __extends(MeiliSearchError, _super);\n          function MeiliSearchError(message) {\n            var _this = _super.call(this, message) || this; // Make errors comparison possible. ex: error instanceof MeiliSearchError.\n\n            Object.setPrototypeOf(_this, MeiliSearchError.prototype);\n            _this.name = 'MeiliSearchError';\n            if (Error.captureStackTrace) {\n              Error.captureStackTrace(_this, MeiliSearchError);\n            }\n            return _this;\n          }\n          return MeiliSearchError;\n        }(Error);\n        var MeiliSearchTimeOutError = /** @class */\n        function (_super) {\n          __extends(MeiliSearchTimeOutError, _super);\n          function MeiliSearchTimeOutError(message) {\n            var _this = _super.call(this, message) || this; // Make errors comparison possible. ex: error instanceof MeiliSearchTimeOutError.\n\n            Object.setPrototypeOf(_this, MeiliSearchTimeOutError.prototype);\n            _this.name = 'MeiliSearchTimeOutError';\n            if (Error.captureStackTrace) {\n              Error.captureStackTrace(_this, MeiliSearchTimeOutError);\n            }\n            return _this;\n          }\n          return MeiliSearchTimeOutError;\n        }(Error);\n\n        /**\r\n         * Removes undefined entries from object\r\n         */\n\n        function removeUndefinedFromObject(obj) {\n          return Object.entries(obj).reduce(function (acc, curEntry) {\n            var key = curEntry[0],\n              val = curEntry[1];\n            if (val !== undefined) acc[key] = val;\n            return acc;\n          }, {});\n        }\n        function sleep(ms) {\n          return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  return [4\n                  /*yield*/, new Promise(function (resolve) {\n                    return setTimeout(resolve, ms);\n                  })];\n                case 1:\n                  return [2\n                  /*return*/, _a.sent()];\n              }\n            });\n          });\n        }\n        function addProtocolIfNotPresent(host) {\n          if (!(host.startsWith('https://') || host.startsWith('http://'))) {\n            return \"http://\".concat(host);\n          }\n          return host;\n        }\n        function addTrailingSlash(url) {\n          if (!url.endsWith('/')) {\n            url += '/';\n          }\n          return url;\n        }\n        var PACKAGE_VERSION = '0.30.0';\n        function toQueryParams(parameters) {\n          var params = Object.keys(parameters);\n          var queryParams = params.reduce(function (acc, key) {\n            var _a, _b, _c;\n            var value = parameters[key];\n            if (value === undefined) {\n              return acc;\n            } else if (Array.isArray(value)) {\n              return __assign(__assign({}, acc), (_a = {}, _a[key] = value.join(','), _a));\n            } else if (value instanceof Date) {\n              return __assign(__assign({}, acc), (_b = {}, _b[key] = value.toISOString(), _b));\n            }\n            return __assign(__assign({}, acc), (_c = {}, _c[key] = value, _c));\n          }, {});\n          return queryParams;\n        }\n        function constructHostURL(host) {\n          try {\n            host = addProtocolIfNotPresent(host);\n            host = addTrailingSlash(host);\n            return host;\n          } catch (e) {\n            throw new MeiliSearchError('The provided host is not valid.');\n          }\n        }\n        function createHeaders(config) {\n          var agentHeader = 'X-Meilisearch-Client';\n          var packageAgent = \"Meilisearch JavaScript (v\".concat(PACKAGE_VERSION, \")\");\n          var contentType = 'Content-Type';\n          config.headers = config.headers || {};\n          var headers = Object.assign({}, config.headers); // Create a hard copy and not a reference to config.headers\n\n          if (config.apiKey) {\n            headers['Authorization'] = \"Bearer \".concat(config.apiKey);\n          }\n          if (!config.headers[contentType]) {\n            headers['Content-Type'] = 'application/json';\n          } // Creates the custom user agent with information on the package used.\n\n          if (config.clientAgents && Array.isArray(config.clientAgents)) {\n            var clients = config.clientAgents.concat(packageAgent);\n            headers[agentHeader] = clients.join(' ; ');\n          } else if (config.clientAgents && !Array.isArray(config.clientAgents)) {\n            // If the header is defined but not an array\n            throw new MeiliSearchError(\"Meilisearch: The header \\\"\".concat(agentHeader, \"\\\" should be an array of string(s).\\n\"));\n          } else {\n            headers[agentHeader] = packageAgent;\n          }\n          return headers;\n        }\n        var HttpRequests = /** @class */\n        function () {\n          function HttpRequests(config) {\n            this.headers = createHeaders(config);\n            try {\n              var host = constructHostURL(config.host);\n              this.url = new URL(host);\n            } catch (e) {\n              throw new MeiliSearchError('The provided host is not valid.');\n            }\n          }\n          HttpRequests.prototype.request = function (_a) {\n            var method = _a.method,\n              url = _a.url,\n              params = _a.params,\n              body = _a.body,\n              config = _a.config;\n            return __awaiter(this, void 0, void 0, function () {\n              var constructURL, queryParams_1, response, parsedBody, e_1, stack;\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    constructURL = new URL(url, this.url);\n                    if (params) {\n                      queryParams_1 = new URLSearchParams();\n                      Object.keys(params).filter(function (x) {\n                        return params[x] !== null;\n                      }).map(function (x) {\n                        return queryParams_1.set(x, params[x]);\n                      });\n                      constructURL.search = queryParams_1.toString();\n                    }\n                    _b.label = 1;\n                  case 1:\n                    _b.trys.push([1, 4,, 5]);\n                    return [4\n                    /*yield*/, fetch(constructURL.toString(), __assign(__assign({}, config), {\n                      method: method,\n                      body: JSON.stringify(body),\n                      headers: this.headers\n                    })).then(function (res) {\n                      return httpResponseErrorHandler(res);\n                    })];\n                  case 2:\n                    response = _b.sent();\n                    return [4\n                    /*yield*/, response.json()[\"catch\"](function () {\n                      return undefined;\n                    })];\n                  case 3:\n                    parsedBody = _b.sent();\n                    return [2\n                    /*return*/, parsedBody];\n                  case 4:\n                    e_1 = _b.sent();\n                    stack = e_1.stack;\n                    httpErrorHandler(e_1, stack, constructURL.toString());\n                    return [3\n                    /*break*/, 5];\n                  case 5:\n                    return [2\n                    /*return*/];\n                }\n              });\n            });\n          };\n\n          HttpRequests.prototype.get = function (url, params, config) {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/, this.request({\n                      method: 'GET',\n                      url: url,\n                      params: params,\n                      config: config\n                    })];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          HttpRequests.prototype.post = function (url, data, params, config) {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/, this.request({\n                      method: 'POST',\n                      url: url,\n                      body: data,\n                      params: params,\n                      config: config\n                    })];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          HttpRequests.prototype.put = function (url, data, params, config) {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/, this.request({\n                      method: 'PUT',\n                      url: url,\n                      body: data,\n                      params: params,\n                      config: config\n                    })];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          HttpRequests.prototype.patch = function (url, data, params, config) {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/, this.request({\n                      method: 'PATCH',\n                      url: url,\n                      body: data,\n                      params: params,\n                      config: config\n                    })];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          HttpRequests.prototype[\"delete\"] = function (url, data, params, config) {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/, this.request({\n                      method: 'DELETE',\n                      url: url,\n                      body: data,\n                      params: params,\n                      config: config\n                    })];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          return HttpRequests;\n        }();\n        var EnqueuedTask = /** @class */\n        function () {\n          function EnqueuedTask(task) {\n            this.taskUid = task.taskUid;\n            this.indexUid = task.indexUid;\n            this.status = task.status;\n            this.type = task.type;\n            this.enqueuedAt = new Date(task.enqueuedAt);\n          }\n          return EnqueuedTask;\n        }();\n        var Task = /** @class */\n        function () {\n          function Task(task) {\n            this.indexUid = task.indexUid;\n            this.status = task.status;\n            this.type = task.type;\n            this.uid = task.uid;\n            this.details = task.details;\n            this.canceledBy = task.canceledBy;\n            this.error = task.error;\n            this.duration = task.duration;\n            this.startedAt = new Date(task.startedAt);\n            this.enqueuedAt = new Date(task.enqueuedAt);\n            this.finishedAt = new Date(task.finishedAt);\n          }\n          return Task;\n        }();\n        var TaskClient = /** @class */\n        function () {\n          function TaskClient(config) {\n            this.httpRequest = new HttpRequests(config);\n          }\n          /**\r\n           * Get one task\r\n           *\r\n           * @param  {number} uid - unique identifier of the task\r\n           *\r\n           * @returns { Promise<Task> }\r\n           */\n\n          TaskClient.prototype.getTask = function (uid) {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, taskItem;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"tasks/\".concat(uid);\n                    return [4\n                    /*yield*/, this.httpRequest.get(url)];\n                  case 1:\n                    taskItem = _a.sent();\n                    return [2\n                    /*return*/, new Task(taskItem)];\n                }\n              });\n            });\n          };\n          /**\r\n           * Get tasks\r\n           *\r\n           * @param  {TasksQuery} [parameters={}] - Parameters to browse the tasks\r\n           *\r\n           * @returns {Promise<TasksResults>} - Promise containing all tasks\r\n           */\n\n          TaskClient.prototype.getTasks = function (parameters) {\n            if (parameters === void 0) {\n              parameters = {};\n            }\n            return __awaiter(this, void 0, void 0, function () {\n              var url, tasks;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"tasks\";\n                    return [4\n                    /*yield*/, this.httpRequest.get(url, toQueryParams(parameters))];\n                  case 1:\n                    tasks = _a.sent();\n                    return [2\n                    /*return*/, __assign(__assign({}, tasks), {\n                      results: tasks.results.map(function (task) {\n                        return new Task(task);\n                      })\n                    })];\n                }\n              });\n            });\n          };\n          /**\r\n           * Wait for a task to be processed.\r\n           *\r\n           * @param {number} taskUid Task identifier\r\n           * @param {WaitOptions} options Additional configuration options\r\n           *\r\n           * @returns {Promise<Task>} Promise returning a task after it has been processed\r\n           */\n\n          TaskClient.prototype.waitForTask = function (taskUid, _a) {\n            var _b = _a === void 0 ? {} : _a,\n              _c = _b.timeOutMs,\n              timeOutMs = _c === void 0 ? 5000 : _c,\n              _d = _b.intervalMs,\n              intervalMs = _d === void 0 ? 50 : _d;\n            return __awaiter(this, void 0, void 0, function () {\n              var startingTime, response;\n              return __generator(this, function (_e) {\n                switch (_e.label) {\n                  case 0:\n                    startingTime = Date.now();\n                    _e.label = 1;\n                  case 1:\n                    if (!(Date.now() - startingTime < timeOutMs)) return [3\n                    /*break*/, 4];\n                    return [4\n                    /*yield*/, this.getTask(taskUid)];\n                  case 2:\n                    response = _e.sent();\n                    if (![\"enqueued\"\n                    /* TASK_ENQUEUED */, \"processing\"\n                    /* TASK_PROCESSING */].includes(response.status)) return [2\n                    /*return*/, response];\n                    return [4\n                    /*yield*/, sleep(intervalMs)];\n                  case 3:\n                    _e.sent();\n                    return [3\n                    /*break*/, 1];\n                  case 4:\n                    throw new MeiliSearchTimeOutError(\"timeout of \".concat(timeOutMs, \"ms has exceeded on process \").concat(taskUid, \" when waiting a task to be resolved.\"));\n                }\n              });\n            });\n          };\n          /**\r\n           * Waits for multiple tasks to be processed\r\n           *\r\n           * @param {number[]} taskUids Tasks identifier list\r\n           * @param {WaitOptions} options Wait options\r\n           *\r\n           * @returns {Promise<Task[]>} Promise returning a list of tasks after they have been processed\r\n           */\n\n          TaskClient.prototype.waitForTasks = function (taskUids, _a) {\n            var _b = _a === void 0 ? {} : _a,\n              _c = _b.timeOutMs,\n              timeOutMs = _c === void 0 ? 5000 : _c,\n              _d = _b.intervalMs,\n              intervalMs = _d === void 0 ? 50 : _d;\n            return __awaiter(this, void 0, void 0, function () {\n              var tasks, _i, taskUids_1, taskUid, task;\n              return __generator(this, function (_e) {\n                switch (_e.label) {\n                  case 0:\n                    tasks = [];\n                    _i = 0, taskUids_1 = taskUids;\n                    _e.label = 1;\n                  case 1:\n                    if (!(_i < taskUids_1.length)) return [3\n                    /*break*/, 4];\n                    taskUid = taskUids_1[_i];\n                    return [4\n                    /*yield*/, this.waitForTask(taskUid, {\n                      timeOutMs: timeOutMs,\n                      intervalMs: intervalMs\n                    })];\n                  case 2:\n                    task = _e.sent();\n                    tasks.push(task);\n                    _e.label = 3;\n                  case 3:\n                    _i++;\n                    return [3\n                    /*break*/, 1];\n                  case 4:\n                    return [2\n                    /*return*/, tasks];\n                }\n              });\n            });\n          };\n          /**\r\n           * Cancel a list of enqueued or processing tasks.\r\n           * @memberof Tasks\r\n           * @method cancelTasks\r\n           * @param {CancelTasksQuery} [parameters={}] - Parameters to filter the tasks.\r\n           *\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          TaskClient.prototype.cancelTasks = function (parameters) {\n            if (parameters === void 0) {\n              parameters = {};\n            }\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"tasks/cancel\";\n                    return [4\n                    /*yield*/, this.httpRequest.post(url, {}, toQueryParams(parameters))];\n                  case 1:\n                    task = _a.sent();\n                    return [2\n                    /*return*/, new EnqueuedTask(task)];\n                }\n              });\n            });\n          };\n          /**\r\n           * Delete a list tasks.\r\n           * @memberof Tasks\r\n           * @method deleteTasks\r\n           * @param {DeleteTasksQuery} [parameters={}] - Parameters to filter the tasks.\r\n           *\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          TaskClient.prototype.deleteTasks = function (parameters) {\n            if (parameters === void 0) {\n              parameters = {};\n            }\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"tasks\";\n                    return [4\n                    /*yield*/, this.httpRequest[\"delete\"](url, {}, toQueryParams(parameters))];\n                  case 1:\n                    task = _a.sent();\n                    return [2\n                    /*return*/, new EnqueuedTask(task)];\n                }\n              });\n            });\n          };\n          return TaskClient;\n        }();\n\n        /*\r\n         * Bundle: MeiliSearch / Indexes\r\n         * Project: MeiliSearch - Javascript API\r\n         * Author: Quentin de Quelen <quentin@meilisearch.com>\r\n         * Copyright: 2019, MeiliSearch\r\n         */\n\n        var Index = /** @class */\n        function () {\n          /**\r\n           * @param {Config} config Request configuration options\r\n           * @param {string} uid UID of the index\r\n           * @param {string} [primaryKey] Primary Key of the index\r\n           */\n          function Index(config, uid, primaryKey) {\n            this.uid = uid;\n            this.primaryKey = primaryKey;\n            this.httpRequest = new HttpRequests(config);\n            this.tasks = new TaskClient(config);\n          } ///\n          /// SEARCH\n          ///\n\n          /**\r\n           * Search for documents into an index\r\n           * @memberof Index\r\n           * @method search\r\n           * @template T\r\n           * @param {string | null} query? Query string\r\n           * @param {SearchParams} options? Search options\r\n           * @param {Partial<Request>} config? Additional request configuration options\r\n           * @returns {Promise<SearchResponse<T>>} Promise containing the search response\r\n           */\n\n          Index.prototype.search = function (query, options, config) {\n            return __awaiter(this, void 0, void 0, function () {\n              var url;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/search\");\n                    return [4\n                    /*yield*/, this.httpRequest.post(url, removeUndefinedFromObject(__assign({\n                      q: query\n                    }, options)), undefined, config)];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Search for documents into an index using the GET method\r\n           * @memberof Index\r\n           * @method search\r\n           * @template T\r\n           * @param {string | null} query? Query string\r\n           * @param {SearchParams} options? Search options\r\n           * @param {Partial<Request>} config? Additional request configuration options\r\n           * @returns {Promise<SearchResponse<T>>} Promise containing the search response\r\n           */\n\n          Index.prototype.searchGet = function (query, options, config) {\n            var _a, _b, _c, _d, _e;\n            return __awaiter(this, void 0, void 0, function () {\n              var url, parseFilter, getParams;\n              return __generator(this, function (_f) {\n                switch (_f.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/search\");\n                    parseFilter = function parseFilter(filter) {\n                      if (typeof filter === 'string') return filter;else if (Array.isArray(filter)) throw new MeiliSearchError('The filter query parameter should be in string format when using searchGet');else return undefined;\n                    };\n                    getParams = __assign(__assign({\n                      q: query\n                    }, options), {\n                      filter: parseFilter(options === null || options === void 0 ? void 0 : options.filter),\n                      sort: (_a = options === null || options === void 0 ? void 0 : options.sort) === null || _a === void 0 ? void 0 : _a.join(','),\n                      facets: (_b = options === null || options === void 0 ? void 0 : options.facets) === null || _b === void 0 ? void 0 : _b.join(','),\n                      attributesToRetrieve: (_c = options === null || options === void 0 ? void 0 : options.attributesToRetrieve) === null || _c === void 0 ? void 0 : _c.join(','),\n                      attributesToCrop: (_d = options === null || options === void 0 ? void 0 : options.attributesToCrop) === null || _d === void 0 ? void 0 : _d.join(','),\n                      attributesToHighlight: (_e = options === null || options === void 0 ? void 0 : options.attributesToHighlight) === null || _e === void 0 ? void 0 : _e.join(',')\n                    });\n                    return [4\n                    /*yield*/, this.httpRequest.get(url, removeUndefinedFromObject(getParams), config)];\n                  case 1:\n                    return [2\n                    /*return*/, _f.sent()];\n                }\n              });\n            });\n          }; ///\n          /// INDEX\n          ///\n\n          /**\r\n           * Get index information.\r\n           * @memberof Index\r\n           * @method getRawInfo\r\n           *\r\n           * @returns {Promise<IndexObject>} Promise containing index information\r\n           */\n\n          Index.prototype.getRawInfo = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, res;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid);\n                    return [4\n                    /*yield*/, this.httpRequest.get(url)];\n                  case 1:\n                    res = _a.sent();\n                    this.primaryKey = res.primaryKey;\n                    this.updatedAt = new Date(res.updatedAt);\n                    this.createdAt = new Date(res.createdAt);\n                    return [2\n                    /*return*/, res];\n                }\n              });\n            });\n          };\n          /**\r\n           * Fetch and update Index information.\r\n           * @memberof Index\r\n           * @method fetchInfo\r\n           * @returns {Promise<this>} Promise to the current Index object with updated information\r\n           */\n\n          Index.prototype.fetchInfo = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/, this.getRawInfo()];\n                  case 1:\n                    _a.sent();\n                    return [2\n                    /*return*/, this];\n                }\n              });\n            });\n          };\n          /**\r\n           * Get Primary Key.\r\n           * @memberof Index\r\n           * @method fetchPrimaryKey\r\n           * @returns {Promise<string | undefined>} Promise containing the Primary Key of the index\r\n           */\n\n          Index.prototype.fetchPrimaryKey = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var _a;\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    _a = this;\n                    return [4\n                    /*yield*/, this.getRawInfo()];\n                  case 1:\n                    _a.primaryKey = _b.sent().primaryKey;\n                    return [2\n                    /*return*/, this.primaryKey];\n                }\n              });\n            });\n          };\n          /**\r\n           * Create an index.\r\n           * @memberof Index\r\n           * @method create\r\n           * @template T\r\n           * @param {string} uid Unique identifier of the Index\r\n           * @param {IndexOptions} options Index options\r\n           * @param {Config} config Request configuration options\r\n           * @returns {Promise<EnqueuedTask>} Newly created Index object\r\n           */\n\n          Index.create = function (uid, options, config) {\n            if (options === void 0) {\n              options = {};\n            }\n            return __awaiter(this, void 0, void 0, function () {\n              var url, req, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes\";\n                    req = new HttpRequests(config);\n                    return [4\n                    /*yield*/, req.post(url, __assign(__assign({}, options), {\n                      uid: uid\n                    }))];\n                  case 1:\n                    task = _a.sent();\n                    return [2\n                    /*return*/, new EnqueuedTask(task)];\n                }\n              });\n            });\n          };\n          /**\r\n           * Update an index.\r\n           * @memberof Index\r\n           * @method update\r\n           * @param {IndexOptions} data Data to update\r\n           * @returns {Promise<this>} Promise to the current Index object with updated information\r\n           */\n\n          Index.prototype.update = function (data) {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid);\n                    return [4\n                    /*yield*/, this.httpRequest.patch(url, data)];\n                  case 1:\n                    task = _a.sent();\n                    task.enqueuedAt = new Date(task.enqueuedAt);\n                    return [2\n                    /*return*/, task];\n                }\n              });\n            });\n          };\n          /**\r\n           * Delete an index.\r\n           * @memberof Index\r\n           * @method delete\r\n           * @returns {Promise<void>} Promise which resolves when index is deleted successfully\r\n           */\n\n          Index.prototype[\"delete\"] = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid);\n                    return [4\n                    /*yield*/, this.httpRequest[\"delete\"](url)];\n                  case 1:\n                    task = _a.sent();\n                    return [2\n                    /*return*/, new EnqueuedTask(task)];\n                }\n              });\n            });\n          }; ///\n          /// TASKS\n          ///\n\n          /**\r\n           * Get the list of all the tasks of the index.\r\n           *\r\n           * @memberof Indexes\r\n           * @method getTasks\r\n           * @param {TasksQuery} [parameters={}] - Parameters to browse the tasks\r\n           *\r\n           * @returns {Promise<TasksResults>} - Promise containing all tasks\r\n           */\n\n          Index.prototype.getTasks = function (parameters) {\n            if (parameters === void 0) {\n              parameters = {};\n            }\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/, this.tasks.getTasks(__assign(__assign({}, parameters), {\n                      indexUids: [this.uid]\n                    }))];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Get one task of the index.\r\n           *\r\n           * @memberof Indexes\r\n           * @method getTask\r\n           * @param {number} taskUid - Task identifier\r\n           *\r\n           * @returns {Promise<Task>} - Promise containing a task\r\n           */\n\n          Index.prototype.getTask = function (taskUid) {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/, this.tasks.getTask(taskUid)];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Wait for multiple tasks to be processed.\r\n           *\r\n           * @memberof Indexes\r\n           * @method waitForTasks\r\n           * @param {number[]} taskUids - Tasks identifier\r\n           * @param {WaitOptions} waitOptions - Options on timeout and interval\r\n           *\r\n           * @returns {Promise<Task[]>} - Promise containing an array of tasks\r\n           */\n\n          Index.prototype.waitForTasks = function (taskUids, _a) {\n            var _b = _a === void 0 ? {} : _a,\n              _c = _b.timeOutMs,\n              timeOutMs = _c === void 0 ? 5000 : _c,\n              _d = _b.intervalMs,\n              intervalMs = _d === void 0 ? 50 : _d;\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_e) {\n                switch (_e.label) {\n                  case 0:\n                    return [4\n                    /*yield*/, this.tasks.waitForTasks(taskUids, {\n                      timeOutMs: timeOutMs,\n                      intervalMs: intervalMs\n                    })];\n                  case 1:\n                    return [2\n                    /*return*/, _e.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Wait for a task to be processed.\r\n           *\r\n           * @memberof Indexes\r\n           * @method waitForTask\r\n           * @param {number} taskUid - Task identifier\r\n           * @param {WaitOptions} waitOptions - Options on timeout and interval\r\n           *\r\n           * @returns {Promise<Task>} - Promise containing an array of tasks\r\n           */\n\n          Index.prototype.waitForTask = function (taskUid, _a) {\n            var _b = _a === void 0 ? {} : _a,\n              _c = _b.timeOutMs,\n              timeOutMs = _c === void 0 ? 5000 : _c,\n              _d = _b.intervalMs,\n              intervalMs = _d === void 0 ? 50 : _d;\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_e) {\n                switch (_e.label) {\n                  case 0:\n                    return [4\n                    /*yield*/, this.tasks.waitForTask(taskUid, {\n                      timeOutMs: timeOutMs,\n                      intervalMs: intervalMs\n                    })];\n                  case 1:\n                    return [2\n                    /*return*/, _e.sent()];\n                }\n              });\n            });\n          }; ///\n          /// STATS\n          ///\n\n          /**\r\n           * get stats of an index\r\n           * @memberof Index\r\n           * @method getStats\r\n           * @returns {Promise<IndexStats>} Promise containing object with stats of the index\r\n           */\n\n          Index.prototype.getStats = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/stats\");\n                    return [4\n                    /*yield*/, this.httpRequest.get(url)];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          }; ///\n          /// DOCUMENTS\n          ///\n\n          /**\r\n           * get documents of an index\r\n           * @memberof Index\r\n           * @method getDocuments\r\n           * @template T\r\n           * @param {DocumentsQuery<T>} [parameters={}] Parameters to browse the documents\r\n           * @returns {Promise<DocumentsResults<T>>>} Promise containing Document responses\r\n           */\n\n          Index.prototype.getDocuments = function (parameters) {\n            if (parameters === void 0) {\n              parameters = {};\n            }\n            return __awaiter(this, void 0, void 0, function () {\n              var url, fields;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/documents\");\n                    fields = function () {\n                      var _a;\n                      if (Array.isArray(parameters === null || parameters === void 0 ? void 0 : parameters.fields)) {\n                        return (_a = parameters === null || parameters === void 0 ? void 0 : parameters.fields) === null || _a === void 0 ? void 0 : _a.join(',');\n                      }\n                      return undefined;\n                    }();\n                    return [4\n                    /*yield*/, this.httpRequest.get(url, removeUndefinedFromObject(__assign(__assign({}, parameters), {\n                      fields: fields\n                    })))];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Get one document\r\n           * @memberof Index\r\n           * @method getDocument\r\n           * @template T\r\n           * @param {string | number} documentId Document ID\r\n           * @param {DocumentQuery<T>} [parameters={}] Parameters applied on a document\r\n           * @returns {Promise<Document<T>>} Promise containing Document response\r\n           */\n\n          Index.prototype.getDocument = function (documentId, parameters) {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, fields;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/documents/\").concat(documentId);\n                    fields = function () {\n                      var _a;\n                      if (Array.isArray(parameters === null || parameters === void 0 ? void 0 : parameters.fields)) {\n                        return (_a = parameters === null || parameters === void 0 ? void 0 : parameters.fields) === null || _a === void 0 ? void 0 : _a.join(',');\n                      }\n                      return undefined;\n                    }();\n                    return [4\n                    /*yield*/, this.httpRequest.get(url, removeUndefinedFromObject(__assign(__assign({}, parameters), {\n                      fields: fields\n                    })))];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Add or replace multiples documents to an index\r\n           * @memberof Index\r\n           * @method addDocuments\r\n           * @template T\r\n           * @param {Array<Document<T>>} documents Array of Document objects to add/replace\r\n           * @param {DocumentOptions} options? Options on document addition\r\n           *\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          Index.prototype.addDocuments = function (documents, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/documents\");\n                    return [4\n                    /*yield*/, this.httpRequest.post(url, documents, options)];\n                  case 1:\n                    task = _a.sent();\n                    return [2\n                    /*return*/, new EnqueuedTask(task)];\n                }\n              });\n            });\n          };\n          /**\r\n           * Add or replace multiples documents to an index in batches\r\n           * @memberof Index\r\n           * @method addDocumentsInBatches\r\n           * @template T\r\n           * @param {Array<Document<T>>} documents Array of Document objects to add/replace\r\n           * @param {number} batchSize Size of the batch\r\n           * @param {DocumentOptions} options? Options on document addition\r\n           * @returns {Promise<EnqueuedTasks>} Promise containing array of enqueued task objects for each batch\r\n           */\n\n          Index.prototype.addDocumentsInBatches = function (documents, batchSize, options) {\n            if (batchSize === void 0) {\n              batchSize = 1000;\n            }\n            return __awaiter(this, void 0, void 0, function () {\n              var updates, i, _a, _b;\n              return __generator(this, function (_c) {\n                switch (_c.label) {\n                  case 0:\n                    updates = [];\n                    i = 0;\n                    _c.label = 1;\n                  case 1:\n                    if (!(i < documents.length)) return [3\n                    /*break*/, 4];\n                    _b = (_a = updates).push;\n                    return [4\n                    /*yield*/, this.addDocuments(documents.slice(i, i + batchSize), options)];\n                  case 2:\n                    _b.apply(_a, [_c.sent()]);\n                    _c.label = 3;\n                  case 3:\n                    i += batchSize;\n                    return [3\n                    /*break*/, 1];\n                  case 4:\n                    return [2\n                    /*return*/, updates];\n                }\n              });\n            });\n          };\n          /**\r\n           * Add or update multiples documents to an index\r\n           * @memberof Index\r\n           * @method updateDocuments\r\n           * @param {Array<Document<Partial<T>>>} documents Array of Document objects to add/update\r\n           * @param {DocumentOptions} options? Options on document update\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          Index.prototype.updateDocuments = function (documents, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/documents\");\n                    return [4\n                    /*yield*/, this.httpRequest.put(url, documents, options)];\n                  case 1:\n                    task = _a.sent();\n                    return [2\n                    /*return*/, new EnqueuedTask(task)];\n                }\n              });\n            });\n          };\n          /**\r\n           * Add or update multiples documents to an index in batches\r\n           * @memberof Index\r\n           * @method updateDocuments\r\n           * @template T\r\n           * @param {Array<Document<T>>} documents Array of Document objects to add/update\r\n           * @param {number} batchSize Size of the batch\r\n           * @param {DocumentOptions} options? Options on document update\r\n           * @returns {Promise<EnqueuedTasks>} Promise containing array of enqueued task objects for each batch\r\n           */\n\n          Index.prototype.updateDocumentsInBatches = function (documents, batchSize, options) {\n            if (batchSize === void 0) {\n              batchSize = 1000;\n            }\n            return __awaiter(this, void 0, void 0, function () {\n              var updates, i, _a, _b;\n              return __generator(this, function (_c) {\n                switch (_c.label) {\n                  case 0:\n                    updates = [];\n                    i = 0;\n                    _c.label = 1;\n                  case 1:\n                    if (!(i < documents.length)) return [3\n                    /*break*/, 4];\n                    _b = (_a = updates).push;\n                    return [4\n                    /*yield*/, this.updateDocuments(documents.slice(i, i + batchSize), options)];\n                  case 2:\n                    _b.apply(_a, [_c.sent()]);\n                    _c.label = 3;\n                  case 3:\n                    i += batchSize;\n                    return [3\n                    /*break*/, 1];\n                  case 4:\n                    return [2\n                    /*return*/, updates];\n                }\n              });\n            });\n          };\n          /**\r\n           * Delete one document\r\n           * @memberof Index\r\n           * @method deleteDocument\r\n           * @param {string | number} documentId Id of Document to delete\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          Index.prototype.deleteDocument = function (documentId) {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/documents/\").concat(documentId);\n                    return [4\n                    /*yield*/, this.httpRequest[\"delete\"](url)];\n                  case 1:\n                    task = _a.sent();\n                    task.enqueuedAt = new Date(task.enqueuedAt);\n                    return [2\n                    /*return*/, task];\n                }\n              });\n            });\n          };\n          /**\r\n           * Delete multiples documents of an index\r\n           * @memberof Index\r\n           * @method deleteDocuments\r\n           * @param {string[] | number[]} documentsIds Array of Document Ids to delete\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          Index.prototype.deleteDocuments = function (documentsIds) {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/documents/delete-batch\");\n                    return [4\n                    /*yield*/, this.httpRequest.post(url, documentsIds)];\n                  case 1:\n                    task = _a.sent();\n                    return [2\n                    /*return*/, new EnqueuedTask(task)];\n                }\n              });\n            });\n          };\n          /**\r\n           * Delete all documents of an index\r\n           * @memberof Index\r\n           * @method deleteAllDocuments\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          Index.prototype.deleteAllDocuments = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/documents\");\n                    return [4\n                    /*yield*/, this.httpRequest[\"delete\"](url)];\n                  case 1:\n                    task = _a.sent();\n                    task.enqueuedAt = new Date(task.enqueuedAt);\n                    return [2\n                    /*return*/, task];\n                }\n              });\n            });\n          }; ///\n          /// SETTINGS\n          ///\n\n          /**\r\n           * Retrieve all settings\r\n           * @memberof Index\r\n           * @method getSettings\r\n           * @returns {Promise<Settings>} Promise containing Settings object\r\n           */\n\n          Index.prototype.getSettings = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings\");\n                    return [4\n                    /*yield*/, this.httpRequest.get(url)];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Update all settings\r\n           * Any parameters not provided will be left unchanged.\r\n           * @memberof Index\r\n           * @method updateSettings\r\n           * @param {Settings} settings Object containing parameters with their updated values\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          Index.prototype.updateSettings = function (settings) {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings\");\n                    return [4\n                    /*yield*/, this.httpRequest.patch(url, settings)];\n                  case 1:\n                    task = _a.sent();\n                    task.enqueued = new Date(task.enqueuedAt);\n                    return [2\n                    /*return*/, task];\n                }\n              });\n            });\n          };\n          /**\r\n           * Reset settings.\r\n           * @memberof Index\r\n           * @method resetSettings\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          Index.prototype.resetSettings = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings\");\n                    return [4\n                    /*yield*/, this.httpRequest[\"delete\"](url)];\n                  case 1:\n                    task = _a.sent();\n                    task.enqueuedAt = new Date(task.enqueuedAt);\n                    return [2\n                    /*return*/, task];\n                }\n              });\n            });\n          }; ///\n          /// PAGINATION SETTINGS\n          ///\n\n          /**\r\n           * Get the pagination settings.\r\n           * @memberof Index\r\n           * @method getPagination\r\n           * @returns {Promise<PaginationSetting>} Promise containing object of pagination settings\r\n           */\n\n          Index.prototype.getPagination = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/pagination\");\n                    return [4\n                    /*yield*/, this.httpRequest.get(url)];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Update the pagination settings.\r\n           * @memberof Index\r\n           * @method updatePagination\r\n           * @param {PaginationSettings} pagination Pagination object\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          Index.prototype.updatePagination = function (pagination) {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/pagination\");\n                    return [4\n                    /*yield*/, this.httpRequest.patch(url, pagination)];\n                  case 1:\n                    task = _a.sent();\n                    return [2\n                    /*return*/, new EnqueuedTask(task)];\n                }\n              });\n            });\n          };\n          /**\r\n           * Reset the pagination settings.\r\n           * @memberof Index\r\n           * @method resetPagination\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          Index.prototype.resetPagination = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/pagination\");\n                    return [4\n                    /*yield*/, this.httpRequest[\"delete\"](url)];\n                  case 1:\n                    task = _a.sent();\n                    return [2\n                    /*return*/, new EnqueuedTask(task)];\n                }\n              });\n            });\n          }; ///\n          /// SYNONYMS\n          ///\n\n          /**\r\n           * Get the list of all synonyms\r\n           * @memberof Index\r\n           * @method getSynonyms\r\n           * @returns {Promise<object>} Promise containing object of synonym mappings\r\n           */\n\n          Index.prototype.getSynonyms = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/synonyms\");\n                    return [4\n                    /*yield*/, this.httpRequest.get(url)];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Update the list of synonyms. Overwrite the old list.\r\n           * @memberof Index\r\n           * @method updateSynonyms\r\n           * @param {Synonyms} synonyms Mapping of synonyms with their associated words\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          Index.prototype.updateSynonyms = function (synonyms) {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/synonyms\");\n                    return [4\n                    /*yield*/, this.httpRequest.put(url, synonyms)];\n                  case 1:\n                    task = _a.sent();\n                    return [2\n                    /*return*/, new EnqueuedTask(task)];\n                }\n              });\n            });\n          };\n          /**\r\n           * Reset the synonym list to be empty again\r\n           * @memberof Index\r\n           * @method resetSynonyms\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          Index.prototype.resetSynonyms = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/synonyms\");\n                    return [4\n                    /*yield*/, this.httpRequest[\"delete\"](url)];\n                  case 1:\n                    task = _a.sent();\n                    task.enqueuedAt = new Date(task.enqueuedAt);\n                    return [2\n                    /*return*/, task];\n                }\n              });\n            });\n          }; ///\n          /// STOP WORDS\n          ///\n\n          /**\r\n           * Get the list of all stop-words\r\n           * @memberof Index\r\n           * @method getStopWords\r\n           * @returns {Promise<string[]>} Promise containing array of stop-words\r\n           */\n\n          Index.prototype.getStopWords = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/stop-words\");\n                    return [4\n                    /*yield*/, this.httpRequest.get(url)];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Update the list of stop-words. Overwrite the old list.\r\n           * @memberof Index\r\n           * @method updateStopWords\r\n           * @param {StopWords} stopWords Array of strings that contains the stop-words.\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          Index.prototype.updateStopWords = function (stopWords) {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/stop-words\");\n                    return [4\n                    /*yield*/, this.httpRequest.put(url, stopWords)];\n                  case 1:\n                    task = _a.sent();\n                    return [2\n                    /*return*/, new EnqueuedTask(task)];\n                }\n              });\n            });\n          };\n          /**\r\n           * Reset the stop-words list to be empty again\r\n           * @memberof Index\r\n           * @method resetStopWords\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          Index.prototype.resetStopWords = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/stop-words\");\n                    return [4\n                    /*yield*/, this.httpRequest[\"delete\"](url)];\n                  case 1:\n                    task = _a.sent();\n                    task.enqueuedAt = new Date(task.enqueuedAt);\n                    return [2\n                    /*return*/, task];\n                }\n              });\n            });\n          }; ///\n          /// RANKING RULES\n          ///\n\n          /**\r\n           * Get the list of all ranking-rules\r\n           * @memberof Index\r\n           * @method getRankingRules\r\n           * @returns {Promise<string[]>} Promise containing array of ranking-rules\r\n           */\n\n          Index.prototype.getRankingRules = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/ranking-rules\");\n                    return [4\n                    /*yield*/, this.httpRequest.get(url)];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Update the list of ranking-rules. Overwrite the old list.\r\n           * @memberof Index\r\n           * @method updateRankingRules\r\n           * @param {RankingRules} rankingRules Array that contain ranking rules sorted by order of importance.\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          Index.prototype.updateRankingRules = function (rankingRules) {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/ranking-rules\");\n                    return [4\n                    /*yield*/, this.httpRequest.put(url, rankingRules)];\n                  case 1:\n                    task = _a.sent();\n                    return [2\n                    /*return*/, new EnqueuedTask(task)];\n                }\n              });\n            });\n          };\n          /**\r\n           * Reset the ranking rules list to its default value\r\n           * @memberof Index\r\n           * @method resetRankingRules\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          Index.prototype.resetRankingRules = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/ranking-rules\");\n                    return [4\n                    /*yield*/, this.httpRequest[\"delete\"](url)];\n                  case 1:\n                    task = _a.sent();\n                    task.enqueuedAt = new Date(task.enqueuedAt);\n                    return [2\n                    /*return*/, task];\n                }\n              });\n            });\n          }; ///\n          /// DISTINCT ATTRIBUTE\n          ///\n\n          /**\r\n           * Get the distinct-attribute\r\n           * @memberof Index\r\n           * @method getDistinctAttribute\r\n           * @returns {Promise<string | null>} Promise containing the distinct-attribute of the index\r\n           */\n\n          Index.prototype.getDistinctAttribute = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/distinct-attribute\");\n                    return [4\n                    /*yield*/, this.httpRequest.get(url)];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Update the distinct-attribute.\r\n           * @memberof Index\r\n           * @method updateDistinctAttribute\r\n           * @param {DistinctAttribute} distinctAttribute Field name of the distinct-attribute\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          Index.prototype.updateDistinctAttribute = function (distinctAttribute) {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/distinct-attribute\");\n                    return [4\n                    /*yield*/, this.httpRequest.put(url, distinctAttribute)];\n                  case 1:\n                    task = _a.sent();\n                    return [2\n                    /*return*/, new EnqueuedTask(task)];\n                }\n              });\n            });\n          };\n          /**\r\n           * Reset the distinct-attribute.\r\n           * @memberof Index\r\n           * @method resetDistinctAttribute\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          Index.prototype.resetDistinctAttribute = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/distinct-attribute\");\n                    return [4\n                    /*yield*/, this.httpRequest[\"delete\"](url)];\n                  case 1:\n                    task = _a.sent();\n                    task.enqueuedAt = new Date(task.enqueuedAt);\n                    return [2\n                    /*return*/, task];\n                }\n              });\n            });\n          }; ///\n          /// FILTERABLE ATTRIBUTES\n          ///\n\n          /**\r\n           * Get the filterable-attributes\r\n           * @memberof Index\r\n           * @method getFilterableAttributes\r\n           * @returns {Promise<string[]>} Promise containing an array of filterable-attributes\r\n           */\n\n          Index.prototype.getFilterableAttributes = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/filterable-attributes\");\n                    return [4\n                    /*yield*/, this.httpRequest.get(url)];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Update the filterable-attributes.\r\n           * @memberof Index\r\n           * @method updateFilterableAttributes\r\n           * @param {FilterableAttributes} filterableAttributes Array of strings containing the attributes that can be used as filters at query time\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          Index.prototype.updateFilterableAttributes = function (filterableAttributes) {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/filterable-attributes\");\n                    return [4\n                    /*yield*/, this.httpRequest.put(url, filterableAttributes)];\n                  case 1:\n                    task = _a.sent();\n                    return [2\n                    /*return*/, new EnqueuedTask(task)];\n                }\n              });\n            });\n          };\n          /**\r\n           * Reset the filterable-attributes.\r\n           * @memberof Index\r\n           * @method resetFilterableAttributes\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          Index.prototype.resetFilterableAttributes = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/filterable-attributes\");\n                    return [4\n                    /*yield*/, this.httpRequest[\"delete\"](url)];\n                  case 1:\n                    task = _a.sent();\n                    task.enqueuedAt = new Date(task.enqueuedAt);\n                    return [2\n                    /*return*/, task];\n                }\n              });\n            });\n          }; ///\n          /// SORTABLE ATTRIBUTES\n          ///\n\n          /**\r\n           * Get the sortable-attributes\r\n           * @memberof Index\r\n           * @method getSortableAttributes\r\n           * @returns {Promise<string[]>} Promise containing array of sortable-attributes\r\n           */\n\n          Index.prototype.getSortableAttributes = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/sortable-attributes\");\n                    return [4\n                    /*yield*/, this.httpRequest.get(url)];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Update the sortable-attributes.\r\n           * @memberof Index\r\n           * @method updateSortableAttributes\r\n           * @param {SortableAttributes} sortableAttributes Array of strings containing the attributes that can be used to sort search results at query time\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          Index.prototype.updateSortableAttributes = function (sortableAttributes) {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/sortable-attributes\");\n                    return [4\n                    /*yield*/, this.httpRequest.put(url, sortableAttributes)];\n                  case 1:\n                    task = _a.sent();\n                    return [2\n                    /*return*/, new EnqueuedTask(task)];\n                }\n              });\n            });\n          };\n          /**\r\n           * Reset the sortable-attributes.\r\n           * @memberof Index\r\n           * @method resetSortableAttributes\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          Index.prototype.resetSortableAttributes = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/sortable-attributes\");\n                    return [4\n                    /*yield*/, this.httpRequest[\"delete\"](url)];\n                  case 1:\n                    task = _a.sent();\n                    task.enqueuedAt = new Date(task.enqueuedAt);\n                    return [2\n                    /*return*/, task];\n                }\n              });\n            });\n          }; ///\n          /// SEARCHABLE ATTRIBUTE\n          ///\n\n          /**\r\n           * Get the searchable-attributes\r\n           * @memberof Index\r\n           * @method getSearchableAttributes\r\n           * @returns {Promise<string[]>} Promise containing array of searchable-attributes\r\n           */\n\n          Index.prototype.getSearchableAttributes = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/searchable-attributes\");\n                    return [4\n                    /*yield*/, this.httpRequest.get(url)];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Update the searchable-attributes.\r\n           * @memberof Index\r\n           * @method updateSearchableAttributes\r\n           * @param {SearchableAttributes} searchableAttributes Array of strings that contains searchable attributes sorted by order of importance(most to least important)\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          Index.prototype.updateSearchableAttributes = function (searchableAttributes) {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/searchable-attributes\");\n                    return [4\n                    /*yield*/, this.httpRequest.put(url, searchableAttributes)];\n                  case 1:\n                    task = _a.sent();\n                    return [2\n                    /*return*/, new EnqueuedTask(task)];\n                }\n              });\n            });\n          };\n          /**\r\n           * Reset the searchable-attributes.\r\n           * @memberof Index\r\n           * @method resetSearchableAttributes\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          Index.prototype.resetSearchableAttributes = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/searchable-attributes\");\n                    return [4\n                    /*yield*/, this.httpRequest[\"delete\"](url)];\n                  case 1:\n                    task = _a.sent();\n                    task.enqueuedAt = new Date(task.enqueuedAt);\n                    return [2\n                    /*return*/, task];\n                }\n              });\n            });\n          }; ///\n          /// DISPLAYED ATTRIBUTE\n          ///\n\n          /**\r\n           * Get the displayed-attributes\r\n           * @memberof Index\r\n           * @method getDisplayedAttributes\r\n           * @returns {Promise<string[]>} Promise containing array of displayed-attributes\r\n           */\n\n          Index.prototype.getDisplayedAttributes = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/displayed-attributes\");\n                    return [4\n                    /*yield*/, this.httpRequest.get(url)];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Update the displayed-attributes.\r\n           * @memberof Index\r\n           * @method updateDisplayedAttributes\r\n           * @param {DisplayedAttributes} displayedAttributes Array of strings that contains attributes of an index to display\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          Index.prototype.updateDisplayedAttributes = function (displayedAttributes) {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/displayed-attributes\");\n                    return [4\n                    /*yield*/, this.httpRequest.put(url, displayedAttributes)];\n                  case 1:\n                    task = _a.sent();\n                    return [2\n                    /*return*/, new EnqueuedTask(task)];\n                }\n              });\n            });\n          };\n          /**\r\n           * Reset the displayed-attributes.\r\n           * @memberof Index\r\n           * @method resetDisplayedAttributes\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          Index.prototype.resetDisplayedAttributes = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/displayed-attributes\");\n                    return [4\n                    /*yield*/, this.httpRequest[\"delete\"](url)];\n                  case 1:\n                    task = _a.sent();\n                    task.enqueuedAt = new Date(task.enqueuedAt);\n                    return [2\n                    /*return*/, task];\n                }\n              });\n            });\n          }; ///\n          /// TYPO TOLERANCE\n          ///\n\n          /**\r\n           * Get the typo tolerance settings.\r\n           * @memberof Index\r\n           * @method getTypoTolerance\r\n           * @returns {Promise<string[]>} Promise containing the typo tolerance settings.\r\n           */\n\n          Index.prototype.getTypoTolerance = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/typo-tolerance\");\n                    return [4\n                    /*yield*/, this.httpRequest.get(url)];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Update the typo tolerance settings.\r\n           * @memberof Index\r\n           * @method updateTypoTolerance\r\n           * @param {TypoTolerance} typoTolerance Object containing the custom typo tolerance settings.\r\n           * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued update\r\n           */\n\n          Index.prototype.updateTypoTolerance = function (typoTolerance) {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/typo-tolerance\");\n                    return [4\n                    /*yield*/, this.httpRequest.patch(url, typoTolerance)];\n                  case 1:\n                    task = _a.sent();\n                    task.enqueuedAt = new Date(task.enqueuedAt);\n                    return [2\n                    /*return*/, task];\n                }\n              });\n            });\n          };\n          /**\r\n           * Reset the typo tolerance settings.\r\n           * @memberof Index\r\n           * @method resetTypoTolerance\r\n           * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued update\r\n           */\n\n          Index.prototype.resetTypoTolerance = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/typo-tolerance\");\n                    return [4\n                    /*yield*/, this.httpRequest[\"delete\"](url)];\n                  case 1:\n                    task = _a.sent();\n                    task.enqueuedAt = new Date(task.enqueuedAt);\n                    return [2\n                    /*return*/, task];\n                }\n              });\n            });\n          }; ///\n          /// FACETING\n          ///\n\n          /**\r\n           * Get the faceting settings.\r\n           * @memberof Index\r\n           * @method getFaceting\r\n           * @returns {Promise<Faceting>} Promise containing object of faceting index settings\r\n           */\n\n          Index.prototype.getFaceting = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/faceting\");\n                    return [4\n                    /*yield*/, this.httpRequest.get(url)];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Update the faceting settings.\r\n           * @memberof Index\r\n           * @method updateFaceting\r\n           * @param {Faceting} faceting Faceting index settings object\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          Index.prototype.updateFaceting = function (faceting) {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/faceting\");\n                    return [4\n                    /*yield*/, this.httpRequest.patch(url, faceting)];\n                  case 1:\n                    task = _a.sent();\n                    return [2\n                    /*return*/, new EnqueuedTask(task)];\n                }\n              });\n            });\n          };\n          /**\r\n           * Reset the faceting settings.\r\n           * @memberof Index\r\n           * @method resetFaceting\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          Index.prototype.resetFaceting = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes/\".concat(this.uid, \"/settings/faceting\");\n                    return [4\n                    /*yield*/, this.httpRequest[\"delete\"](url)];\n                  case 1:\n                    task = _a.sent();\n                    return [2\n                    /*return*/, new EnqueuedTask(task)];\n                }\n              });\n            });\n          };\n          return Index;\n        }();\n\n        /*\r\n         * Bundle: MeiliSearch\r\n         * Project: MeiliSearch - Javascript API\r\n         * Author: Quentin de Quelen <quentin@meilisearch.com>\r\n         * Copyright: 2019, MeiliSearch\r\n         */\n\n        var Client = /** @class */\n        function () {\n          /**\r\n           * Creates new MeiliSearch instance\r\n           * @param {Config} config Configuration object\r\n           */\n          function Client(config) {\n            this.config = config;\n            this.httpRequest = new HttpRequests(config);\n            this.tasks = new TaskClient(config);\n          }\n          /**\r\n           * Return an Index instance\r\n           * @memberof MeiliSearch\r\n           * @method index\r\n           * @template T\r\n           * @param {string} indexUid The index UID\r\n           * @returns {Index<T>} Instance of Index\r\n           */\n\n          Client.prototype.index = function (indexUid) {\n            return new Index(this.config, indexUid);\n          };\n          /**\r\n           * Gather information about an index by calling MeiliSearch and\r\n           * return an Index instance with the gathered information\r\n           * @memberof MeiliSearch\r\n           * @method getIndex\r\n           * @template T\r\n           * @param {string} indexUid The index UID\r\n           * @returns {Promise<Index<T>>} Promise returning Index instance\r\n           */\n\n          Client.prototype.getIndex = function (indexUid) {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                return [2\n                /*return*/, new Index(this.config, indexUid).fetchInfo()];\n              });\n            });\n          };\n          /**\r\n           * Gather information about an index by calling MeiliSearch and\r\n           * return the raw JSON response\r\n           * @memberof MeiliSearch\r\n           * @method getRawIndex\r\n           * @param {string} indexUid The index UID\r\n           * @returns {Promise<IndexObject>} Promise returning index information\r\n           */\n\n          Client.prototype.getRawIndex = function (indexUid) {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                return [2\n                /*return*/, new Index(this.config, indexUid).getRawInfo()];\n              });\n            });\n          };\n          /**\r\n           * Get all the indexes as Index instances.\r\n           * @memberof MeiliSearch\r\n           * @method getIndexes\r\n           * @param {IndexesQuery} [parameters={}] - Parameters to browse the indexes\r\n           *\r\n           * @returns {Promise<IndexesResults<Index[]>>} Promise returning array of raw index information\r\n           */\n\n          Client.prototype.getIndexes = function (parameters) {\n            if (parameters === void 0) {\n              parameters = {};\n            }\n            return __awaiter(this, void 0, void 0, function () {\n              var rawIndexes, indexes;\n              var _this = this;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/, this.getRawIndexes(parameters)];\n                  case 1:\n                    rawIndexes = _a.sent();\n                    indexes = rawIndexes.results.map(function (index) {\n                      return new Index(_this.config, index.uid, index.primaryKey);\n                    });\n                    return [2\n                    /*return*/, __assign(__assign({}, rawIndexes), {\n                      results: indexes\n                    })];\n                }\n              });\n            });\n          };\n          /**\r\n           * Get all the indexes in their raw value (no Index instances).\r\n           * @memberof MeiliSearch\r\n           * @method getRawIndexes\r\n           * @param {IndexesQuery} [parameters={}] - Parameters to browse the indexes\r\n           *\r\n           * @returns {Promise<IndexesResults<IndexObject[]>>} Promise returning array of raw index information\r\n           */\n\n          Client.prototype.getRawIndexes = function (parameters) {\n            if (parameters === void 0) {\n              parameters = {};\n            }\n            return __awaiter(this, void 0, void 0, function () {\n              var url;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"indexes\";\n                    return [4\n                    /*yield*/, this.httpRequest.get(url, parameters)];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Create a new index\r\n           * @memberof MeiliSearch\r\n           * @method createIndex\r\n           * @template T\r\n           * @param {string} uid The index UID\r\n           * @param {IndexOptions} options Index options\r\n           * @returns {Promise<Index<T>>} Promise returning Index instance\r\n           */\n\n          Client.prototype.createIndex = function (uid, options) {\n            if (options === void 0) {\n              options = {};\n            }\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/, Index.create(uid, options, this.config)];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Update an index\r\n           * @memberof MeiliSearch\r\n           * @method updateIndex\r\n           * @template T\r\n           * @param {string} uid The index UID\r\n           * @param {IndexOptions} options Index options to update\r\n           * @returns {Promise<Index<T>>} Promise returning Index instance after updating\r\n           */\n\n          Client.prototype.updateIndex = function (uid, options) {\n            if (options === void 0) {\n              options = {};\n            }\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/, new Index(this.config, uid).update(options)];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Delete an index\r\n           * @memberof MeiliSearch\r\n           * @method deleteIndex\r\n           * @param {string} uid The index UID\r\n           * @returns {Promise<void>} Promise which resolves when index is deleted successfully\r\n           */\n\n          Client.prototype.deleteIndex = function (uid) {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/, new Index(this.config, uid)[\"delete\"]()];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Deletes an index if it already exists.\r\n           * @memberof MeiliSearch\r\n           * @method deleteIndexIfExists\r\n           * @param {string} uid The index UID\r\n           * @returns {Promise<boolean>} Promise which resolves to true when index exists and is deleted successfully, otherwise false if it does not exist\r\n           */\n\n          Client.prototype.deleteIndexIfExists = function (uid) {\n            return __awaiter(this, void 0, void 0, function () {\n              var e_1;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    _a.trys.push([0, 2,, 3]);\n                    return [4\n                    /*yield*/, this.deleteIndex(uid)];\n                  case 1:\n                    _a.sent();\n                    return [2\n                    /*return*/, true];\n                  case 2:\n                    e_1 = _a.sent();\n                    if (e_1.code === \"index_not_found\"\n                    /* INDEX_NOT_FOUND */) {\n                      return [2\n                      /*return*/, false];\n                    }\n                    throw e_1;\n                  case 3:\n                    return [2\n                    /*return*/];\n                }\n              });\n            });\n          };\n          /**\r\n           * Swaps a list of index tuples.\r\n           *\r\n           * @memberof MeiliSearch\r\n           * @method swapIndexes\r\n           * @param {SwapIndexesParams} params - List of indexes tuples to swap.\r\n           * @returns {Promise<EnqueuedTask>} - Promise returning object of the enqueued task\r\n           */\n\n          Client.prototype.swapIndexes = function (params) {\n            return __awaiter(this, void 0, void 0, function () {\n              var url;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = '/swap-indexes';\n                    return [4\n                    /*yield*/, this.httpRequest.post(url, params)];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          }; ///\n          /// TASKS\n          ///\n\n          /**\r\n           * Get the list of all client tasks\r\n           * @memberof MeiliSearch\r\n           * @method getTasks\r\n           * @param {TasksQuery} [parameters={}] - Parameters to browse the tasks\r\n           *\r\n           * @returns {Promise<TasksResults>} - Promise returning all tasks\r\n           */\n\n          Client.prototype.getTasks = function (parameters) {\n            if (parameters === void 0) {\n              parameters = {};\n            }\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/, this.tasks.getTasks(parameters)];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Get one task on the client scope\r\n           * @memberof MeiliSearch\r\n           * @method getTask\r\n           * @param {number} taskUid - Task identifier\r\n           * @returns {Promise<Task>} - Promise returning a task\r\n           */\n\n          Client.prototype.getTask = function (taskUid) {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/, this.tasks.getTask(taskUid)];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Wait for multiple tasks to be finished.\r\n           *\r\n           * @memberof MeiliSearch\r\n           * @method waitForTasks\r\n           * @param {number[]} taskUids - Tasks identifier\r\n           * @param {WaitOptions} waitOptions - Options on timeout and interval\r\n           *\r\n           * @returns {Promise<Task[]>} - Promise returning an array of tasks\r\n           */\n\n          Client.prototype.waitForTasks = function (taskUids, _a) {\n            var _b = _a === void 0 ? {} : _a,\n              _c = _b.timeOutMs,\n              timeOutMs = _c === void 0 ? 5000 : _c,\n              _d = _b.intervalMs,\n              intervalMs = _d === void 0 ? 50 : _d;\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_e) {\n                switch (_e.label) {\n                  case 0:\n                    return [4\n                    /*yield*/, this.tasks.waitForTasks(taskUids, {\n                      timeOutMs: timeOutMs,\n                      intervalMs: intervalMs\n                    })];\n                  case 1:\n                    return [2\n                    /*return*/, _e.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Wait for a task to be finished.\r\n           *\r\n           * @memberof MeiliSearch\r\n           * @method waitForTask\r\n           *\r\n           * @param {number} taskUid - Task identifier\r\n           * @param {WaitOptions} waitOptions - Options on timeout and interval\r\n           *\r\n           * @returns {Promise<Task>} - Promise returning an array of tasks\r\n           */\n\n          Client.prototype.waitForTask = function (taskUid, _a) {\n            var _b = _a === void 0 ? {} : _a,\n              _c = _b.timeOutMs,\n              timeOutMs = _c === void 0 ? 5000 : _c,\n              _d = _b.intervalMs,\n              intervalMs = _d === void 0 ? 50 : _d;\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_e) {\n                switch (_e.label) {\n                  case 0:\n                    return [4\n                    /*yield*/, this.tasks.waitForTask(taskUid, {\n                      timeOutMs: timeOutMs,\n                      intervalMs: intervalMs\n                    })];\n                  case 1:\n                    return [2\n                    /*return*/, _e.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Cancel a list of enqueued or processing tasks.\r\n           * @memberof MeiliSearch\r\n           * @method cancelTasks\r\n           * @param {CancelTasksQuery} [parameters={}] - Parameters to filter the tasks.\r\n           *\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          Client.prototype.cancelTasks = function (parameters) {\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/, this.tasks.cancelTasks(parameters)];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Delete a list of tasks.\r\n           * @memberof MeiliSearch\r\n           * @method deleteTasks\r\n           * @param {DeleteTasksQuery} [parameters={}] - Parameters to filter the tasks.\r\n           *\r\n           * @returns {Promise<EnqueuedTask>} Promise containing an EnqueuedTask\r\n           */\n\n          Client.prototype.deleteTasks = function (parameters) {\n            if (parameters === void 0) {\n              parameters = {};\n            }\n            return __awaiter(this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/, this.tasks.deleteTasks(parameters)];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          }; ///\n          /// KEYS\n          ///\n\n          /**\r\n           * Get all API keys\r\n           * @memberof MeiliSearch\r\n           * @method getKeys\r\n           * @param {KeysQuery} [parameters={}] - Parameters to browse the indexes\r\n           *\r\n           * @returns {Promise<KeysResults>} Promise returning an object with keys\r\n           */\n\n          Client.prototype.getKeys = function (parameters) {\n            if (parameters === void 0) {\n              parameters = {};\n            }\n            return __awaiter(this, void 0, void 0, function () {\n              var url, keys;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"keys\";\n                    return [4\n                    /*yield*/, this.httpRequest.get(url, parameters)];\n                  case 1:\n                    keys = _a.sent();\n                    keys.results = keys.results.map(function (key) {\n                      return __assign(__assign({}, key), {\n                        createdAt: new Date(key.createdAt),\n                        updateAt: new Date(key.updateAt)\n                      });\n                    });\n                    return [2\n                    /*return*/, keys];\n                }\n              });\n            });\n          };\n          /**\r\n           * Get one API key\r\n           * @memberof MeiliSearch\r\n           * @method getKey\r\n           *\r\n           * @param {string} keyOrUid - Key or uid of the API key\r\n           * @returns {Promise<Key>} Promise returning a key\r\n           */\n\n          Client.prototype.getKey = function (keyOrUid) {\n            return __awaiter(this, void 0, void 0, function () {\n              var url;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"keys/\".concat(keyOrUid);\n                    return [4\n                    /*yield*/, this.httpRequest.get(url)];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Create one API key\r\n           * @memberof MeiliSearch\r\n           * @method createKey\r\n           *\r\n           * @param {KeyCreation} options - Key options\r\n           * @returns {Promise<Key>} Promise returning a key\r\n           */\n\n          Client.prototype.createKey = function (options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var url;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"keys\";\n                    return [4\n                    /*yield*/, this.httpRequest.post(url, options)];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Update one API key\r\n           * @memberof MeiliSearch\r\n           * @method updateKey\r\n           *\r\n           * @param {string} keyOrUid - Key\r\n           * @param {KeyUpdate} options - Key options\r\n           * @returns {Promise<Key>} Promise returning a key\r\n           */\n\n          Client.prototype.updateKey = function (keyOrUid, options) {\n            return __awaiter(this, void 0, void 0, function () {\n              var url;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"keys/\".concat(keyOrUid);\n                    return [4\n                    /*yield*/, this.httpRequest.patch(url, options)];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Delete one API key\r\n           * @memberof MeiliSearch\r\n           * @method deleteKey\r\n           *\r\n           * @param {string} keyOrUid - Key\r\n           * @returns {Promise<Void>}\r\n           */\n\n          Client.prototype.deleteKey = function (keyOrUid) {\n            return __awaiter(this, void 0, void 0, function () {\n              var url;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"keys/\".concat(keyOrUid);\n                    return [4\n                    /*yield*/, this.httpRequest[\"delete\"](url)];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          }; ///\n          /// HEALTH\n          ///\n\n          /**\r\n           * Checks if the server is healthy, otherwise an error will be thrown.\r\n           * @memberof MeiliSearch\r\n           * @method health\r\n           * @returns {Promise<Health>} Promise returning an object with health details\r\n           */\n\n          Client.prototype.health = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"health\";\n                    return [4\n                    /*yield*/, this.httpRequest.get(url)];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          };\n          /**\r\n           * Checks if the server is healthy, return true or false.\r\n           * @memberof MeiliSearch\r\n           * @method isHealthy\r\n           * @returns {Promise<boolean>} Promise returning a boolean\r\n           */\n\n          Client.prototype.isHealthy = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    _a.trys.push([0, 2,, 3]);\n                    url = \"health\";\n                    return [4\n                    /*yield*/, this.httpRequest.get(url)];\n                  case 1:\n                    _a.sent();\n                    return [2\n                    /*return*/, true];\n                  case 2:\n                    _a.sent();\n                    return [2\n                    /*return*/, false];\n                  case 3:\n                    return [2\n                    /*return*/];\n                }\n              });\n            });\n          }; ///\n          /// STATS\n          ///\n\n          /**\r\n           * Get the stats of all the database\r\n           * @memberof MeiliSearch\r\n           * @method getStats\r\n           * @returns {Promise<Stats>} Promise returning object of all the stats\r\n           */\n\n          Client.prototype.getStats = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"stats\";\n                    return [4\n                    /*yield*/, this.httpRequest.get(url)];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          }; ///\n          /// VERSION\n          ///\n\n          /**\r\n           * Get the version of MeiliSearch\r\n           * @memberof MeiliSearch\r\n           * @method getVersion\r\n           * @returns {Promise<Version>} Promise returning object with version details\r\n           */\n\n          Client.prototype.getVersion = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"version\";\n                    return [4\n                    /*yield*/, this.httpRequest.get(url)];\n                  case 1:\n                    return [2\n                    /*return*/, _a.sent()];\n                }\n              });\n            });\n          }; ///\n          /// DUMPS\n          ///\n\n          /**\r\n           * Creates a dump\r\n           * @memberof MeiliSearch\r\n           * @method createDump\r\n           * @returns {Promise<EnqueuedTask>} Promise returning object of the enqueued task\r\n           */\n\n          Client.prototype.createDump = function () {\n            return __awaiter(this, void 0, void 0, function () {\n              var url, task;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    url = \"dumps\";\n                    return [4\n                    /*yield*/, this.httpRequest.post(url)];\n                  case 1:\n                    task = _a.sent();\n                    return [2\n                    /*return*/, new EnqueuedTask(task)];\n                }\n              });\n            });\n          }; ///\n          /// TOKENS\n          ///\n\n          /**\r\n           * Generate a tenant token\r\n           *\r\n           * @memberof MeiliSearch\r\n           * @method generateTenantToken\r\n           * @param {apiKeyUid} apiKeyUid The uid of the api key used as issuer of the token.\r\n           * @param {SearchRules} searchRules Search rules that are applied to every search.\r\n           * @param {TokenOptions} options Token options to customize some aspect of the token.\r\n           *\r\n           * @returns {String} The token in JWT format.\r\n           */\n\n          Client.prototype.generateTenantToken = function (_apiKeyUid, _searchRules, _options) {\n            var error = new Error();\n            throw new Error(\"Meilisearch: failed to generate a tenant token. Generation of a token only works in a node environment \\n \".concat(error.stack, \".\"));\n          };\n          return Client;\n        }();\n        var MeiliSearch = /** @class */\n        function (_super) {\n          __extends(MeiliSearch, _super);\n          function MeiliSearch(config) {\n            return _super.call(this, config) || this;\n          }\n          return MeiliSearch;\n        }(Client);\n        exports.Index = Index;\n        exports.MatchingStrategies = MatchingStrategies;\n        exports.MeiliSearch = MeiliSearch;\n        exports.MeiliSearchApiError = MeiliSearchApiError;\n        exports.MeiliSearchCommunicationError = MeiliSearchCommunicationError;\n        exports.MeiliSearchError = MeiliSearchError;\n        exports.MeiliSearchTimeOutError = MeiliSearchTimeOutError;\n        exports[\"default\"] = MeiliSearch;\n        exports.httpErrorHandler = httpErrorHandler;\n        exports.httpResponseErrorHandler = httpResponseErrorHandler;\n        Object.defineProperty(exports, '__esModule', {\n          value: true\n        });\n      });\n    });\n\n    var removeUndefined = function (arr) {\r\n        return arr.filter(function (x) { return x !== undefined; });\r\n    };\n\n    /**\r\n     * @param  {any} str\r\n     * @returns {boolean}\r\n     */\r\n    /**\r\n     * @param  {string} filter\r\n     * @returns {string}\r\n     */\r\n    function replaceColonByEqualSign(filter) {\r\n        // will only change first occurence of `:`\r\n        return filter.replace(/:(.*)/i, '=\"$1\"');\r\n    }\r\n    /**\r\n     * @param  {any[]} arr\r\n     * @returns {string}\r\n     */\r\n    function stringifyArray(arr) {\r\n        return arr.reduce(function (acc, curr) {\r\n            return (acc += JSON.stringify(curr));\r\n        }, '');\r\n    }\n\n    function isPureObject(data) {\r\n        return typeof data === 'object' && !Array.isArray(data) && data !== null;\r\n    }\n\n    /**\r\n     * apiKey callback definition\r\n     * @callback apiKeyCallback\r\n     * @returns {string} - The apiKey to use\r\n     */\r\n    /**\r\n     * Validates host and apiKey parameters, throws if invalid\r\n     * @param hostUrl\r\n     * @param apiKey\r\n     */\r\n    function validateInstantMeiliSearchParams(hostUrl, apiKey) {\r\n        // Validate host url\r\n        if (typeof hostUrl !== 'string') {\r\n            throw new TypeError('Provided hostUrl value (1st parameter) is not a string, expected string');\r\n        }\r\n        // Validate api key\r\n        if (typeof apiKey !== 'string' && typeof apiKey !== 'function') {\r\n            throw new TypeError('Provided apiKey value (2nd parameter) is not a string or a function, expected string or function');\r\n        }\r\n    }\n\n    /**\r\n     * @param  {string} filter\r\n     */\r\n    var adaptFilterSyntax = function (filter) {\r\n        var matches = filter.match(/([^=]*)=\"?([^\\\\\"]*)\"?$/);\r\n        if (matches) {\r\n            matches[0]; var filterName = matches[1], value = matches[2];\r\n            return [{ filterName: filterName, value: value }];\r\n        }\r\n        return [];\r\n    };\r\n    /**\r\n     * @param  {Filter} filters?\r\n     * @returns {Array}\r\n     */\r\n    function extractFilters(filters) {\r\n        if (typeof filters === 'string') {\r\n            return adaptFilterSyntax(filters);\r\n        }\r\n        else if (Array.isArray(filters)) {\r\n            return filters\r\n                .map(function (nestedFilter) {\r\n                if (Array.isArray(nestedFilter)) {\r\n                    return nestedFilter.map(function (filter) { return adaptFilterSyntax(filter); });\r\n                }\r\n                return adaptFilterSyntax(nestedFilter);\r\n            })\r\n                .flat(2);\r\n        }\r\n        return [];\r\n    }\r\n    /**\r\n     * @param  {Filter} filters?\r\n     * @returns {FacetsCache}\r\n     */\r\n    function getFacetsFromFilter(filters) {\r\n        var extractedFilters = extractFilters(filters);\r\n        var cleanFilters = removeUndefined(extractedFilters);\r\n        return cleanFilters.reduce(function (cache, parsedFilter) {\r\n            var _a;\r\n            var filterName = parsedFilter.filterName, value = parsedFilter.value;\r\n            var prevFields = cache[filterName] || [];\r\n            cache = __assign(__assign({}, cache), (_a = {}, _a[filterName] = __spreadArray(__spreadArray([], prevFields, true), [value], false), _a));\r\n            return cache;\r\n        }, {});\r\n    }\r\n    function getFacetsFromDefaultDistribution(facetDistribution) {\r\n        return Object.keys(facetDistribution).reduce(function (cache, facet) {\r\n            var _a;\r\n            var facetValues = Object.keys(facetDistribution[facet]);\r\n            return __assign(__assign({}, cache), (_a = {}, _a[facet] = facetValues, _a));\r\n        }, {});\r\n    }\r\n    /**\r\n     * @param  {Filter} filters?\r\n     * @returns {FacetsCache}\r\n     */\r\n    function extractFacets(searchContext, searchParams) {\r\n        if (searchContext.keepZeroFacets) {\r\n            return getFacetsFromDefaultDistribution(searchContext.defaultFacetDistribution);\r\n        }\r\n        else {\r\n            return getFacetsFromFilter(searchParams === null || searchParams === void 0 ? void 0 : searchParams.filter);\r\n        }\r\n    }\r\n    /**\r\n     * Assign missing filters to facetDistribution.\r\n     * All facets passed as filter should appear in the facetDistribution.\r\n     * If not present, the facet is added with 0 as value.\r\n     *\r\n     *\r\n     * @param  {FacetsCache} cache?\r\n     * @param  {FacetDistribution} distribution?\r\n     * @returns {FacetDistribution}\r\n     */\r\n    function addMissingFacets(cachedFacets, distribution) {\r\n        distribution = distribution || {};\r\n        // If cachedFacets contains something\r\n        if (cachedFacets && Object.keys(cachedFacets).length > 0) {\r\n            // for all filters in cached filters\r\n            for (var cachedFacet in cachedFacets) {\r\n                // if facet does not exist on returned distribution, add an empty object\r\n                if (!distribution[cachedFacet])\r\n                    distribution[cachedFacet] = {};\r\n                // for all fields in every filter\r\n                for (var _i = 0, _a = cachedFacets[cachedFacet]; _i < _a.length; _i++) {\r\n                    var cachedField = _a[_i];\r\n                    // if the field is not present in the returned distribution\r\n                    // set it at 0\r\n                    if (!Object.keys(distribution[cachedFacet]).includes(cachedField)) {\r\n                        // add 0 value\r\n                        distribution[cachedFacet][cachedField] = 0;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return distribution;\r\n    }\n\n    /**\r\n     * @param  {ResponseCacher} cache\r\n     */\r\n    function SearchResolver(client, cache) {\r\n        return {\r\n            /**\r\n             * @param  {SearchContext} searchContext\r\n             * @param  {MeiliSearchParams} searchParams\r\n             * @param  {MeiliSearch} client\r\n             * @returns {Promise}\r\n             */\r\n            searchResponse: function (searchContext, searchParams) {\r\n                return __awaiter(this, void 0, void 0, function () {\r\n                    var placeholderSearch, query, key, cachedResponse, cachedFacets, searchResponse;\r\n                    return __generator(this, function (_a) {\r\n                        switch (_a.label) {\r\n                            case 0:\r\n                                placeholderSearch = searchContext.placeholderSearch, query = searchContext.query;\r\n                                key = cache.formatKey([\r\n                                    searchParams,\r\n                                    searchContext.indexUid,\r\n                                    searchContext.query,\r\n                                    searchContext.pagination,\r\n                                ]);\r\n                                cachedResponse = cache.getEntry(key);\r\n                                // Check if specific request is already cached with its associated search response.\r\n                                if (cachedResponse)\r\n                                    return [2 /*return*/, cachedResponse];\r\n                                cachedFacets = extractFacets(searchContext, searchParams);\r\n                                return [4 /*yield*/, client\r\n                                        .index(searchContext.indexUid)\r\n                                        .search(searchContext.query, searchParams)\r\n                                    // Add missing facets back into facetDistribution\r\n                                ];\r\n                            case 1:\r\n                                searchResponse = _a.sent();\r\n                                // Add missing facets back into facetDistribution\r\n                                searchResponse.facetDistribution = addMissingFacets(cachedFacets, searchResponse.facetDistribution);\r\n                                // query can be: empty string, undefined or null\r\n                                // all of them are falsy's\r\n                                if (!placeholderSearch && !query) {\r\n                                    searchResponse.hits = [];\r\n                                }\r\n                                // Cache response\r\n                                cache.setEntry(key, searchResponse);\r\n                                return [2 /*return*/, searchResponse];\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        };\r\n    }\n\n    /**\r\n     * @param  {number} rad\r\n     * @returns {number}\r\n     */\r\n    function rad2degr(rad) {\r\n        return (rad * 180) / Math.PI;\r\n    }\r\n    /**\r\n     * @param  {number} degr\r\n     * @returns {number}\r\n     */\r\n    function degr2rad(degr) {\r\n        return (degr * Math.PI) / 180;\r\n    }\r\n    /**\r\n     * @param  {number} lat1\r\n     * @param  {number} lng1\r\n     * @param  {number} lat2\r\n     * @param  {number} lng2\r\n     * @returns {string}\r\n     */\r\n    function middleGeoPoints(lat1, lng1, lat2, lng2) {\r\n        // convert to radians\r\n        lat1 = degr2rad(lat1);\r\n        lng1 = degr2rad(lng1);\r\n        var x1 = Math.cos(lat1) * Math.cos(lng1);\r\n        var y1 = Math.cos(lat1) * Math.sin(lng1);\r\n        var z1 = Math.sin(lat1);\r\n        // convert to radians\r\n        lat2 = degr2rad(lat2);\r\n        lng2 = degr2rad(lng2);\r\n        var x2 = Math.cos(lat2) * Math.cos(lng2);\r\n        var y2 = Math.cos(lat2) * Math.sin(lng2);\r\n        var z2 = Math.sin(lat2);\r\n        var x = x1 + x2;\r\n        var y = y1 + y2;\r\n        var z = z1 + z2;\r\n        var Hyp = Math.sqrt(x * x + y * y);\r\n        var lng3 = Math.atan2(y, x);\r\n        var lat3 = Math.atan2(z, Hyp);\r\n        if (lng1 < lng2 || (lng1 > lng2 && lng1 > Math.PI && lng2 < -Math.PI)) {\r\n            lat3 = lat3 + Math.PI;\r\n            lng3 = lng3 + Math.PI;\r\n        }\r\n        else {\r\n            lat3 = rad2degr(lat3);\r\n            lng3 = rad2degr(lng3);\r\n        }\r\n        if (Math.abs(x) < Math.pow(10, -9) &&\r\n            Math.abs(y) < Math.pow(10, -9) &&\r\n            Math.abs(z) < Math.pow(10, -9)) {\r\n            lat3 = 0;\r\n            lng3 = 0;\r\n        }\r\n        return \"\".concat(lat3, \",\").concat(lng3);\r\n    }\r\n    /**\r\n     * @param  {number} lat1\r\n     * @param  {number} lng1\r\n     * @param  {number} lat2\r\n     * @param  {number} lng2\r\n     * @returns {number}\r\n     */\r\n    function getDistanceInMeter(lat1, lng1, lat2, lng2) {\r\n        // Haversine Algorithm\r\n        var R = 6371e3; // metres\r\n        var latRad1 = (lat1 * Math.PI) / 180;\r\n        var latRad2 = (lat2 * Math.PI) / 180;\r\n        var latCenterRad = ((lat2 - lat1) * Math.PI) / 180;\r\n        var lngCenterRad = ((lng2 - lng1) * Math.PI) / 180;\r\n        var a = Math.sin(latCenterRad / 2) * Math.sin(latCenterRad / 2) +\r\n            Math.cos(latRad1) *\r\n                Math.cos(latRad2) *\r\n                Math.sin(lngCenterRad / 2) *\r\n                Math.sin(lngCenterRad / 2);\r\n        var bearing = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n        var distance = R * bearing; // in metres\r\n        return distance;\r\n    }\n\n    function adaptGeoPointsRules(geoSearchContext) {\r\n        if (!geoSearchContext) {\r\n            return undefined;\r\n        }\r\n        var insideBoundingBox = geoSearchContext.insideBoundingBox, aroundLatLng = geoSearchContext.aroundLatLng, aroundRadius = geoSearchContext.aroundRadius, minimumAroundRadius = geoSearchContext.minimumAroundRadius;\r\n        var middlePoint;\r\n        var radius;\r\n        if (aroundLatLng) {\r\n            middlePoint = aroundLatLng;\r\n        }\r\n        if (aroundRadius != null || minimumAroundRadius != null) {\r\n            if (aroundRadius != null)\r\n                radius = aroundRadius;\r\n            else\r\n                radius = minimumAroundRadius;\r\n        }\r\n        // If insideBoundingBox is provided it takes precedent over all other options\r\n        if (insideBoundingBox && typeof insideBoundingBox === 'string') {\r\n            var _a = insideBoundingBox.split(','), lat1Raw = _a[0], lng1Raw = _a[1], lat2Raw = _a[2], lng2Raw = _a[3];\r\n            var _b = [\r\n                parseFloat(lat1Raw),\r\n                parseFloat(lng1Raw),\r\n                parseFloat(lat2Raw),\r\n                parseFloat(lng2Raw),\r\n            ], lat1 = _b[0], lng1 = _b[1], lat2 = _b[2], lng2 = _b[3];\r\n            radius = getDistanceInMeter(lat1, lng1, lat2, lng2) / 2;\r\n            middlePoint = middleGeoPoints(lat1, lng1, lat2, lng2);\r\n        }\r\n        if (middlePoint != null && radius != null) {\r\n            var _c = middlePoint.split(','), lat3 = _c[0], lng3 = _c[1];\r\n            lat3 = Number.parseFloat(lat3).toFixed(5);\r\n            lng3 = Number.parseFloat(lng3).toFixed(5);\r\n            var filter = \"_geoRadius(\".concat(lat3, \", \").concat(lng3, \", \").concat(radius, \")\");\r\n            return { filter: filter };\r\n        }\r\n        return undefined;\r\n    }\r\n    function createGeoSearchContext(searchContext) {\r\n        var geoContext = {};\r\n        var aroundLatLng = searchContext.aroundLatLng, aroundLatLngViaIP = searchContext.aroundLatLngViaIP, aroundRadius = searchContext.aroundRadius, aroundPrecision = searchContext.aroundPrecision, minimumAroundRadius = searchContext.minimumAroundRadius, insideBoundingBox = searchContext.insideBoundingBox, insidePolygon = searchContext.insidePolygon;\r\n        if (aroundLatLng) {\r\n            geoContext.aroundLatLng = aroundLatLng;\r\n        }\r\n        if (aroundLatLngViaIP) {\r\n            console.warn('instant-meilisearch: `aroundLatLngViaIP` is not supported.');\r\n        }\r\n        if (aroundRadius) {\r\n            geoContext.aroundRadius = aroundRadius;\r\n        }\r\n        if (aroundPrecision) {\r\n            console.warn(\"instant-meilisearch: `aroundPrecision` is not supported.\\n    See this discussion to track its implementation https://github.com/meilisearch/product/discussions/264\");\r\n        }\r\n        if (minimumAroundRadius) {\r\n            geoContext.minimumAroundRadius = minimumAroundRadius;\r\n        }\r\n        if (insideBoundingBox) {\r\n            geoContext.insideBoundingBox = insideBoundingBox;\r\n        }\r\n        // See related issue: https://github.com/meilisearch/instant-meilisearch/issues/555\r\n        if (insidePolygon) {\r\n            console.warn(\"instant-meilisearch: `insidePolygon` is not implented in instant-meilisearch.\");\r\n        }\r\n        return geoContext;\r\n    }\n\n    /**\r\n     * Transform InstantSearch filter to Meilisearch filter.\r\n     * Change sign from `:` to `=` in nested filter object.\r\n     * example: [`genres:comedy`] becomes [`genres=comedy`]\r\n     *\r\n     * @param  {SearchContext['facetFilters']} filters?\r\n     * @returns {Filter}\r\n     */\r\n    function transformFilter(filters) {\r\n        if (typeof filters === 'string') {\r\n            return replaceColonByEqualSign(filters);\r\n        }\r\n        else if (Array.isArray(filters))\r\n            return filters\r\n                .map(function (filter) {\r\n                if (Array.isArray(filter))\r\n                    return filter\r\n                        .map(function (nestedFilter) { return replaceColonByEqualSign(nestedFilter); })\r\n                        .filter(function (elem) { return elem; });\r\n                else {\r\n                    return replaceColonByEqualSign(filter);\r\n                }\r\n            })\r\n                .filter(function (elem) { return elem; });\r\n        return [];\r\n    }\r\n    /**\r\n     * Return the filter in an array if it is a string\r\n     * If filter is array, return without change.\r\n     *\r\n     * @param  {Filter} filter\r\n     * @returns {Array}\r\n     */\r\n    function filterToArray(filter) {\r\n        // Filter is a string\r\n        if (filter === '')\r\n            return [];\r\n        else if (typeof filter === 'string')\r\n            return [filter];\r\n        // Filter is either an array of strings, or an array of array of strings\r\n        return filter;\r\n    }\r\n    /**\r\n     * Merge facetFilters, numericFilters and filters together.\r\n     *\r\n     * @param  {Filter} facetFilters\r\n     * @param  {Filter} numericFilters\r\n     * @param  {string} filters\r\n     * @returns {Filter}\r\n     */\r\n    function mergeFilters(facetFilters, numericFilters, filters) {\r\n        var adaptedFilters = filters.trim();\r\n        var adaptedFacetFilters = filterToArray(facetFilters);\r\n        var adaptedNumericFilters = filterToArray(numericFilters);\r\n        var adaptedFilter = __spreadArray(__spreadArray(__spreadArray([], adaptedFacetFilters, true), adaptedNumericFilters, true), [\r\n            adaptedFilters,\r\n        ], false);\r\n        var cleanedFilters = adaptedFilter.filter(function (filter) {\r\n            if (Array.isArray(filter)) {\r\n                return filter.length;\r\n            }\r\n            return filter;\r\n        });\r\n        return cleanedFilters;\r\n    }\r\n    /**\r\n     * Adapt instantsearch.js filters to Meilisearch filters by\r\n     * combining and transforming all provided filters.\r\n     *\r\n     * @param  {string|undefined} filters\r\n     * @param  {SearchContext['numericFilters']} numericFilters\r\n     * @param  {SearchContext['facetFilters']} facetFilters\r\n     * @returns {Filter}\r\n     */\r\n    function adaptFilters(filters, numericFilters, facetFilters) {\r\n        var transformedFilter = transformFilter(facetFilters || []);\r\n        var transformedNumericFilter = transformFilter(numericFilters || []);\r\n        return mergeFilters(transformedFilter, transformedNumericFilter, filters || '');\r\n    }\n\n    function setScrollPagination(hitsPerPage, page, query, placeholderSearch) {\r\n        if (!placeholderSearch && query === '') {\r\n            return {\r\n                limit: 0,\r\n                offset: 0\r\n            };\r\n        }\r\n        return {\r\n            limit: hitsPerPage + 1,\r\n            offset: page * hitsPerPage\r\n        };\r\n    }\r\n    function setFinitePagination(hitsPerPage, page, query, placeholderSearch) {\r\n        if (!placeholderSearch && query === '') {\r\n            return {\r\n                hitsPerPage: 0,\r\n                page: page + 1\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                hitsPerPage: hitsPerPage,\r\n                page: page + 1\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Adapts instantsearch.js and instant-meilisearch options\r\n     * to meilisearch search query parameters.\r\n     *\r\n     * @param  {SearchContext} searchContext\r\n     *\r\n     * @returns {MeiliSearchParams}\r\n     */\r\n    function MeiliParamsCreator(searchContext) {\r\n        var meiliSearchParams = {};\r\n        var facets = searchContext.facets, attributesToSnippet = searchContext.attributesToSnippet, snippetEllipsisText = searchContext.snippetEllipsisText, attributesToRetrieve = searchContext.attributesToRetrieve, filters = searchContext.filters, numericFilters = searchContext.numericFilters, facetFilters = searchContext.facetFilters, attributesToHighlight = searchContext.attributesToHighlight, highlightPreTag = searchContext.highlightPreTag, highlightPostTag = searchContext.highlightPostTag, placeholderSearch = searchContext.placeholderSearch, query = searchContext.query, sort = searchContext.sort, pagination = searchContext.pagination, matchingStrategy = searchContext.matchingStrategy;\r\n        return {\r\n            getParams: function () {\r\n                return meiliSearchParams;\r\n            },\r\n            addFacets: function () {\r\n                if (facets === null || facets === void 0 ? void 0 : facets.length) {\r\n                    meiliSearchParams.facets = facets;\r\n                }\r\n            },\r\n            addAttributesToCrop: function () {\r\n                if (attributesToSnippet) {\r\n                    meiliSearchParams.attributesToCrop = attributesToSnippet;\r\n                }\r\n            },\r\n            addCropMarker: function () {\r\n                // Attributes To Crop marker\r\n                if (snippetEllipsisText != null) {\r\n                    meiliSearchParams.cropMarker = snippetEllipsisText;\r\n                }\r\n            },\r\n            addAttributesToRetrieve: function () {\r\n                if (attributesToRetrieve) {\r\n                    meiliSearchParams.attributesToRetrieve = attributesToRetrieve;\r\n                }\r\n            },\r\n            addFilters: function () {\r\n                var filter = adaptFilters(filters, numericFilters, facetFilters);\r\n                if (filter.length) {\r\n                    meiliSearchParams.filter = filter;\r\n                }\r\n            },\r\n            addAttributesToHighlight: function () {\r\n                meiliSearchParams.attributesToHighlight = attributesToHighlight || ['*'];\r\n            },\r\n            addPreTag: function () {\r\n                if (highlightPreTag) {\r\n                    meiliSearchParams.highlightPreTag = highlightPreTag;\r\n                }\r\n                else {\r\n                    meiliSearchParams.highlightPreTag = '__ais-highlight__';\r\n                }\r\n            },\r\n            addPostTag: function () {\r\n                if (highlightPostTag) {\r\n                    meiliSearchParams.highlightPostTag = highlightPostTag;\r\n                }\r\n                else {\r\n                    meiliSearchParams.highlightPostTag = '__/ais-highlight__';\r\n                }\r\n            },\r\n            addPagination: function () {\r\n                if (pagination.finite) {\r\n                    var _a = setFinitePagination(pagination.hitsPerPage, pagination.page, query, placeholderSearch), hitsPerPage = _a.hitsPerPage, page = _a.page;\r\n                    meiliSearchParams.hitsPerPage = hitsPerPage;\r\n                    meiliSearchParams.page = page;\r\n                }\r\n                else {\r\n                    var _b = setScrollPagination(pagination.hitsPerPage, pagination.page, query, placeholderSearch), limit = _b.limit, offset = _b.offset;\r\n                    meiliSearchParams.limit = limit;\r\n                    meiliSearchParams.offset = offset;\r\n                }\r\n            },\r\n            addSort: function () {\r\n                if (sort === null || sort === void 0 ? void 0 : sort.length) {\r\n                    meiliSearchParams.sort = [sort];\r\n                }\r\n            },\r\n            addGeoSearchRules: function () {\r\n                var geoSearchContext = createGeoSearchContext(searchContext);\r\n                var geoRules = adaptGeoPointsRules(geoSearchContext);\r\n                if (geoRules === null || geoRules === void 0 ? void 0 : geoRules.filter) {\r\n                    if (meiliSearchParams.filter) {\r\n                        meiliSearchParams.filter.unshift(geoRules.filter);\r\n                    }\r\n                    else {\r\n                        meiliSearchParams.filter = [geoRules.filter];\r\n                    }\r\n                }\r\n            },\r\n            addMatchingStrategy: function () {\r\n                if (matchingStrategy) {\r\n                    meiliSearchParams.matchingStrategy = matchingStrategy;\r\n                }\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * Adapt search request from instantsearch.js\r\n     * to search request compliant with Meilisearch\r\n     *\r\n     * @param  {SearchContext} searchContext\r\n     * @returns {MeiliSearchParams}\r\n     */\r\n    function adaptSearchParams(searchContext) {\r\n        var meilisearchParams = MeiliParamsCreator(searchContext);\r\n        meilisearchParams.addFacets();\r\n        meilisearchParams.addAttributesToHighlight();\r\n        meilisearchParams.addPreTag();\r\n        meilisearchParams.addPostTag();\r\n        meilisearchParams.addAttributesToRetrieve();\r\n        meilisearchParams.addAttributesToCrop();\r\n        meilisearchParams.addCropMarker();\r\n        meilisearchParams.addPagination();\r\n        meilisearchParams.addFilters();\r\n        meilisearchParams.addSort();\r\n        meilisearchParams.addGeoSearchRules();\r\n        meilisearchParams.addMatchingStrategy();\r\n        return meilisearchParams.getParams();\r\n    }\n\n    /**\r\n     * Stringify values following instantsearch practices.\r\n     *\r\n     * @param  {any} value - value that needs to be stringified\r\n     */\r\n    function stringifyValue(value) {\r\n        if (typeof value === 'string') {\r\n            // String\r\n            return value;\r\n        }\r\n        else if (value === undefined) {\r\n            // undefined\r\n            return JSON.stringify(null);\r\n        }\r\n        else {\r\n            return JSON.stringify(value);\r\n        }\r\n    }\r\n    /**\r\n     * Recursif function wrap the deepest possible value\r\n     * the following way: { value: \"xx\" }.\r\n     *\r\n     * For example:\r\n     *\r\n     * {\r\n     * \"rootField\": { \"value\": \"x\" }\r\n     * \"nestedField\": { child: { value: \"y\" } }\r\n     * }\r\n     *\r\n     * recursivity continues until the value is not an array or an object.\r\n     *\r\n     * @param  {any} value - value of a field\r\n     *\r\n     * @returns Record<string, any>\r\n     */\r\n    function wrapValue(value) {\r\n        if (Array.isArray(value)) {\r\n            // Array\r\n            return value.map(function (elem) { return wrapValue(elem); });\r\n        }\r\n        else if (isPureObject(value)) {\r\n            // Object\r\n            return Object.keys(value).reduce(function (nested, key) {\r\n                nested[key] = wrapValue(value[key]);\r\n                return nested;\r\n            }, {});\r\n        }\r\n        else {\r\n            return { value: stringifyValue(value) };\r\n        }\r\n    }\r\n    /**\r\n     * Adapt Meilisearch formatted fields to a format compliant to instantsearch.js.\r\n     *\r\n     * @param  {Record<string} formattedHit\r\n     * @param  {SearchContext} searchContext\r\n     * @returns {Record}\r\n     */\r\n    function adaptFormattedFields(hit) {\r\n        if (!hit)\r\n            return {};\r\n        var _formattedResult = wrapValue(hit);\r\n        var highlightedHit = {\r\n            // We could not determine what the differences are between those two fields.\r\n            _highlightResult: _formattedResult,\r\n            _snippetResult: _formattedResult\r\n        };\r\n        return highlightedHit;\r\n    }\n\n    /**\r\n     * @param  {any[]} hits\r\n     * @returns {Array<Record<string, any>>}\r\n     */\r\n    function adaptGeoResponse(hits) {\r\n        var _a;\r\n        for (var i = 0; i < hits.length; i++) {\r\n            var objectID = \"\".concat(i + Math.random() * 1000000);\r\n            if (hits[i]._geo) {\r\n                hits[i]._geoloc = hits[i]._geo;\r\n                hits[i].objectID = objectID;\r\n            }\r\n            if ((_a = hits[i]._formatted) === null || _a === void 0 ? void 0 : _a._geo) {\r\n                hits[i]._formatted._geoloc = hits[i]._formatted._geo;\r\n                hits[i]._formatted.objectID = objectID;\r\n            }\r\n        }\r\n        return hits;\r\n    }\n\n    /**\r\n     * @param  {MeiliSearchResponse<Record<string, any>>} searchResponse\r\n     * @param  {SearchContext} searchContext\r\n     * @returns {Array<Record<string, any>>}\r\n     */\r\n    function adaptHits(searchResponse, searchContext) {\r\n        var primaryKey = searchContext.primaryKey;\r\n        var hits = searchResponse.hits;\r\n        var _a = searchContext.pagination, finite = _a.finite, hitsPerPage = _a.hitsPerPage;\r\n        // if the length of the hits is bigger than the hitsPerPage\r\n        // It means that there is still pages to come as we append limit by hitsPerPage + 1\r\n        // In which case we still need to remove the additional hit returned by Meilisearch\r\n        if (!finite && hits.length > hitsPerPage) {\r\n            hits.splice(hits.length - 1, 1);\r\n        }\r\n        var adaptedHits = hits.map(function (hit) {\r\n            // Creates Hit object compliant with InstantSearch\r\n            if (Object.keys(hit).length > 0) {\r\n                var formattedHit = hit._formatted; hit._matchesPosition; var documentFields = __rest(hit, [\"_formatted\", \"_matchesPosition\"]);\r\n                var adaptedHit = Object.assign(documentFields, adaptFormattedFields(formattedHit));\r\n                if (primaryKey) {\r\n                    adaptedHit.objectID = hit[primaryKey];\r\n                }\r\n                return adaptedHit;\r\n            }\r\n            return hit;\r\n        });\r\n        adaptedHits = adaptGeoResponse(adaptedHits);\r\n        return adaptedHits;\r\n    }\n\n    function adaptTotalHits(searchResponse) {\r\n        var _a = searchResponse.hitsPerPage, hitsPerPage = _a === void 0 ? 0 : _a, _b = searchResponse.totalPages, totalPages = _b === void 0 ? 0 : _b, estimatedTotalHits = searchResponse.estimatedTotalHits, totalHits = searchResponse.totalHits;\r\n        if (estimatedTotalHits != null) {\r\n            return estimatedTotalHits;\r\n        }\r\n        else if (totalHits != null) {\r\n            return totalHits;\r\n        }\r\n        // Should not happen but safeguarding just in case\r\n        return hitsPerPage * totalPages;\r\n    }\n\n    function adaptNbPages(searchResponse, hitsPerPage) {\r\n        if (searchResponse.totalPages != null) {\r\n            return searchResponse.totalPages;\r\n        }\r\n        // Avoid dividing by 0\r\n        if (hitsPerPage === 0) {\r\n            return 0;\r\n        }\r\n        var _a = searchResponse.limit, limit = _a === void 0 ? 20 : _a, _b = searchResponse.offset, offset = _b === void 0 ? 0 : _b, hits = searchResponse.hits;\r\n        var additionalPage = hits.length >= limit ? 1 : 0;\r\n        return offset / hitsPerPage + 1 + additionalPage;\r\n    }\r\n    function adaptPaginationParameters(searchResponse, paginationState) {\r\n        var hitsPerPage = paginationState.hitsPerPage, page = paginationState.page;\r\n        var nbPages = adaptNbPages(searchResponse, hitsPerPage);\r\n        return {\r\n            page: page,\r\n            nbPages: nbPages,\r\n            hitsPerPage: hitsPerPage\r\n        };\r\n    }\n\n    /**\r\n     * Adapt search response from Meilisearch\r\n     * to search response compliant with instantsearch.js\r\n     *\r\n     * @param  {MeiliSearchResponse<Record<string>>} searchResponse\r\n     * @param  {SearchContext} searchContext\r\n     * @returns {{ results: Array<AlgoliaSearchResponse<T>> }}\r\n     */\r\n    function adaptSearchResponse(searchResponse, searchContext) {\r\n        var searchResponseOptionals = {};\r\n        var processingTimeMs = searchResponse.processingTimeMs, query = searchResponse.query, facets = searchResponse.facetDistribution;\r\n        var _a = adaptPaginationParameters(searchResponse, searchContext.pagination), hitsPerPage = _a.hitsPerPage, page = _a.page, nbPages = _a.nbPages;\r\n        var hits = adaptHits(searchResponse, searchContext);\r\n        var nbHits = adaptTotalHits(searchResponse);\r\n        // Create response object compliant with InstantSearch\r\n        var adaptedSearchResponse = __assign({ index: searchContext.indexUid, hitsPerPage: hitsPerPage, page: page, facets: facets, nbPages: nbPages, nbHits: nbHits, processingTimeMS: processingTimeMs, query: query, hits: hits, params: '', exhaustiveNbHits: false }, searchResponseOptionals);\r\n        return {\r\n            results: [adaptedSearchResponse]\r\n        };\r\n    }\n\n    /**\r\n     * Create the current state of the pagination\r\n     *\r\n     * @param  {boolean} [finite]\r\n     * @param  {number} [hitsPerPage]\r\n     * @param  {number} [page]\r\n     * @returns {SearchContext}\r\n     */\r\n    function createPaginationState(finite, hitsPerPage, page) {\r\n        return {\r\n            hitsPerPage: hitsPerPage === undefined ? 20 : hitsPerPage,\r\n            page: page || 0,\r\n            finite: !!finite\r\n        };\r\n    }\n\n    /**\r\n     * @param  {AlgoliaMultipleQueriesQuery} searchRequest\r\n     * @param  {Context} options\r\n     * @returns {SearchContext}\r\n     */\r\n    function createSearchContext(searchRequest, options, defaultFacetDistribution) {\r\n        // Split index name and possible sorting rules\r\n        var _a = searchRequest.indexName.split(':'), indexUid = _a[0], sortByArray = _a.slice(1);\r\n        var instantSearchParams = searchRequest.params;\r\n        var paginationState = createPaginationState(options.finitePagination, instantSearchParams === null || instantSearchParams === void 0 ? void 0 : instantSearchParams.hitsPerPage, instantSearchParams === null || instantSearchParams === void 0 ? void 0 : instantSearchParams.page);\r\n        var searchContext = __assign(__assign(__assign({}, options), instantSearchParams), { sort: sortByArray.join(':') || '', indexUid: indexUid, pagination: paginationState, defaultFacetDistribution: defaultFacetDistribution || {}, placeholderSearch: options.placeholderSearch !== false, keepZeroFacets: !!options.keepZeroFacets });\r\n        return searchContext;\r\n    }\n\n    /**\r\n     * @param  {Record<string} cache\r\n     * @returns {SearchCache}\r\n     */\r\n    function SearchCache(cache) {\r\n        if (cache === void 0) { cache = {}; }\r\n        var searchCache = cache;\r\n        return {\r\n            getEntry: function (key) {\r\n                if (searchCache[key]) {\r\n                    try {\r\n                        return JSON.parse(searchCache[key]);\r\n                    }\r\n                    catch (_) {\r\n                        return searchCache[key];\r\n                    }\r\n                }\r\n                return undefined;\r\n            },\r\n            formatKey: function (components) {\r\n                return stringifyArray(components);\r\n            },\r\n            setEntry: function (key, searchResponse) {\r\n                searchCache[key] = JSON.stringify(searchResponse);\r\n            },\r\n            clearCache: function () {\r\n                searchCache = {};\r\n            }\r\n        };\r\n    }\n\n    function cacheFirstFacetDistribution(searchResolver, searchContext) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var defaultSearchContext, meilisearchParams, searchResponse;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        defaultSearchContext = __assign(__assign({}, searchContext), { \r\n                            // placeholdersearch true to ensure a request is made\r\n                            placeholderSearch: true, \r\n                            // query set to empty to ensure retrieving the default facetdistribution\r\n                            query: '' });\r\n                        meilisearchParams = MeiliParamsCreator(defaultSearchContext);\r\n                        meilisearchParams.addFacets();\r\n                        meilisearchParams.addPagination();\r\n                        return [4 /*yield*/, searchResolver.searchResponse(defaultSearchContext, meilisearchParams.getParams())];\r\n                    case 1:\r\n                        searchResponse = _a.sent();\r\n                        return [2 /*return*/, searchResponse.facetDistribution || {}];\r\n                }\r\n            });\r\n        });\r\n    }\n\n    var PACKAGE_VERSION = '0.10.1';\n\n    var constructClientAgents = function (clientAgents) {\r\n        if (clientAgents === void 0) { clientAgents = []; }\r\n        var instantMeilisearchAgent = \"Meilisearch instant-meilisearch (v\".concat(PACKAGE_VERSION, \")\");\r\n        return clientAgents.concat(instantMeilisearchAgent);\r\n    };\n\n    /**\r\n     * apiKey callback definition\r\n     * @callback apiKeyCallback\r\n     * @returns {string} - The apiKey to use\r\n     */\r\n    /**\r\n     * Instantiate SearchClient required by instantsearch.js.\r\n     * @param  {string} hostUrl\r\n     * @param  {string | apiKeyCallback} apiKey\r\n     * @param  {InstantMeiliSearchOptions={}} meiliSearchOptions\r\n     * @returns {InstantMeiliSearchInstance}\r\n     */\r\n    function instantMeiliSearch(hostUrl, apiKey, instantMeiliSearchOptions) {\r\n        if (apiKey === void 0) { apiKey = ''; }\r\n        if (instantMeiliSearchOptions === void 0) { instantMeiliSearchOptions = {}; }\r\n        // Validate parameters\r\n        validateInstantMeiliSearchParams(hostUrl, apiKey);\r\n        // Resolve possible function to get apiKey\r\n        apiKey = getApiKey(apiKey);\r\n        var clientAgents = constructClientAgents(instantMeiliSearchOptions.clientAgents);\r\n        var meilisearchClient = new meilisearch_umd.MeiliSearch({\r\n            host: hostUrl,\r\n            apiKey: apiKey,\r\n            clientAgents: clientAgents\r\n        });\r\n        var searchCache = SearchCache();\r\n        // create search resolver with included cache\r\n        var searchResolver = SearchResolver(meilisearchClient, searchCache);\r\n        var defaultFacetDistribution;\r\n        return {\r\n            clearCache: function () { return searchCache.clearCache(); },\r\n            /**\r\n             * @param  {readonlyAlgoliaMultipleQueriesQuery[]} instantSearchRequests\r\n             * @returns {Array}\r\n             */\r\n            search: function (instantSearchRequests) {\r\n                return __awaiter(this, void 0, void 0, function () {\r\n                    var searchRequest, searchContext, adaptedSearchRequest, searchResponse, adaptedSearchResponse, e_1;\r\n                    return __generator(this, function (_a) {\r\n                        switch (_a.label) {\r\n                            case 0:\r\n                                _a.trys.push([0, 4, , 5]);\r\n                                searchRequest = instantSearchRequests[0];\r\n                                searchContext = createSearchContext(searchRequest, instantMeiliSearchOptions, defaultFacetDistribution);\r\n                                adaptedSearchRequest = adaptSearchParams(searchContext);\r\n                                if (!(defaultFacetDistribution === undefined)) return [3 /*break*/, 2];\r\n                                return [4 /*yield*/, cacheFirstFacetDistribution(searchResolver, searchContext)];\r\n                            case 1:\r\n                                defaultFacetDistribution = _a.sent();\r\n                                searchContext.defaultFacetDistribution = defaultFacetDistribution;\r\n                                _a.label = 2;\r\n                            case 2: return [4 /*yield*/, searchResolver.searchResponse(searchContext, adaptedSearchRequest)\r\n                                // Adapt the Meilisearch responsne to a compliant instantsearch.js response\r\n                            ];\r\n                            case 3:\r\n                                searchResponse = _a.sent();\r\n                                adaptedSearchResponse = adaptSearchResponse(searchResponse, searchContext);\r\n                                return [2 /*return*/, adaptedSearchResponse];\r\n                            case 4:\r\n                                e_1 = _a.sent();\r\n                                console.error(e_1);\r\n                                throw new Error(e_1);\r\n                            case 5: return [2 /*return*/];\r\n                        }\r\n                    });\r\n                });\r\n            },\r\n            searchForFacetValues: function (_) {\r\n                return __awaiter(this, void 0, void 0, function () {\r\n                    return __generator(this, function (_a) {\r\n                        switch (_a.label) {\r\n                            case 0: return [4 /*yield*/, new Promise(function (resolve, reject) {\r\n                                    reject(new Error('SearchForFacetValues is not compatible with Meilisearch'));\r\n                                    resolve([]); // added here to avoid compilation error\r\n                                })];\r\n                            case 1: return [2 /*return*/, _a.sent()];\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * Resolves apiKey if it is a function\r\n     * @param  {string | apiKeyCallback} apiKey\r\n     * @returns {string} api key value\r\n     */\r\n    function getApiKey(apiKey) {\r\n        // If apiKey is function, call it to get the apiKey\r\n        if (typeof apiKey === 'function') {\r\n            var apiKeyFnValue = apiKey();\r\n            if (typeof apiKeyFnValue !== 'string') {\r\n                throw new TypeError('Provided apiKey function (2nd parameter) did not return a string, expected string');\r\n            }\r\n            return apiKeyFnValue;\r\n        }\r\n        return apiKey;\r\n    }\n\n    exports.MatchingStrategies = void 0;\r\n    (function (MatchingStrategies) {\r\n        MatchingStrategies[\"ALL\"] = \"all\";\r\n        MatchingStrategies[\"LAST\"] = \"last\";\r\n    })(exports.MatchingStrategies || (exports.MatchingStrategies = {}));\n\n    exports.instantMeiliSearch = instantMeiliSearch;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@meilisearch/instant-meilisearch/dist/instant-meilisearch.umd.js\n"));

/***/ }),

/***/ "./src/components/Header.jsx":
/*!***********************************!*\
  !*** ./src/components/Header.jsx ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/image */ \"./node_modules/next/image.js\");\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_image__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @fortawesome/react-fontawesome */ \"./node_modules/@fortawesome/react-fontawesome/index.es.js\");\n/* harmony import */ var _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @fortawesome/free-solid-svg-icons */ \"./node_modules/@fortawesome/free-solid-svg-icons/index.mjs\");\n/* harmony import */ var _assets_images_icon_logo_png__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../assets/images/icon-logo.png */ \"./src/assets/images/icon-logo.png\");\n/* harmony import */ var _assets_images_logo_ibisnis_png__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../assets/images/logo-ibisnis.png */ \"./src/assets/images/logo-ibisnis.png\");\n/* harmony import */ var _meilisearch_instant_meilisearch__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @meilisearch/instant-meilisearch */ \"./node_modules/@meilisearch/instant-meilisearch/dist/instant-meilisearch.umd.js\");\n/* harmony import */ var _meilisearch_instant_meilisearch__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_meilisearch_instant_meilisearch__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n\n\n\n\nfunction Header() {\n    var searchClient = (0,_meilisearch_instant_meilisearch__WEBPACK_IMPORTED_MODULE_6__.instantMeiliSearch)(\"https://integration-demos.meilisearch.com\", {\n        primaryKey: \"id\"\n    });\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"fixed z-20 flex justify-between top-0 left-0 w-full bg-white shadow-md\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex justify-between w-full lg:justify-start lg:w-auto\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"pr-2\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_image__WEBPACK_IMPORTED_MODULE_2___default()), {\n                            width: \"55\",\n                            height: \"55\",\n                            src: _assets_images_icon_logo_png__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n                            alt: \"\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\ARYO\\\\Documents\\\\ibisnis_react\\\\src\\\\components\\\\Header.jsx\",\n                            lineNumber: 24,\n                            columnNumber: 11\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\ARYO\\\\Documents\\\\ibisnis_react\\\\src\\\\components\\\\Header.jsx\",\n                        lineNumber: 23,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"p-2\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_image__WEBPACK_IMPORTED_MODULE_2___default()), {\n                            className: \"mt-3\",\n                            width: \"70\",\n                            height: \"70\",\n                            src: _assets_images_logo_ibisnis_png__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\n                            alt: \"\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\ARYO\\\\Documents\\\\ibisnis_react\\\\src\\\\components\\\\Header.jsx\",\n                            lineNumber: 32,\n                            columnNumber: 11\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\ARYO\\\\Documents\\\\ibisnis_react\\\\src\\\\components\\\\Header.jsx\",\n                        lineNumber: 31,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"p-2 flex items-center mx-3 border-cyan-100 rounded-md\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                className: \"hidden lg:block border-y-2 border-l-2 border-r-2 border-gray-200 py-1 px-3 rounded-l-lg absolute lg:relative lg:border-r-0\",\n                                type: \"search\",\n                                name: \"\",\n                                id: \"\",\n                                placeholder: \"Search Keyword\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\ARYO\\\\Documents\\\\ibisnis_react\\\\src\\\\components\\\\Header.jsx\",\n                                lineNumber: 41,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"lg:border-y-2 lg:border-r-2 lg:border-gray-200 p-1 px-2 rounded-r-lg\",\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_3__.FontAwesomeIcon, {\n                                    icon: _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_7__.faSearch\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\ARYO\\\\Documents\\\\ibisnis_react\\\\src\\\\components\\\\Header.jsx\",\n                                    lineNumber: 49,\n                                    columnNumber: 13\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\ARYO\\\\Documents\\\\ibisnis_react\\\\src\\\\components\\\\Header.jsx\",\n                                lineNumber: 48,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\ARYO\\\\Documents\\\\ibisnis_react\\\\src\\\\components\\\\Header.jsx\",\n                        lineNumber: 40,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\ARYO\\\\Documents\\\\ibisnis_react\\\\src\\\\components\\\\Header.jsx\",\n                lineNumber: 22,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"hidden lg:flex lg:items-center\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"select\", {\n                        name: \"\",\n                        id: \"\",\n                        className: \"border-0 mx-3\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                value: \"Surabaya\",\n                                children: \"Surabaya\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\ARYO\\\\Documents\\\\ibisnis_react\\\\src\\\\components\\\\Header.jsx\",\n                                lineNumber: 55,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                value: \"Jakarta\",\n                                children: \"Jakarta\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\ARYO\\\\Documents\\\\ibisnis_react\\\\src\\\\components\\\\Header.jsx\",\n                                lineNumber: 56,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\ARYO\\\\Documents\\\\ibisnis_react\\\\src\\\\components\\\\Header.jsx\",\n                        lineNumber: 54,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"text-gray-500 mx-3\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_3__.FontAwesomeIcon, {\n                                icon: _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_7__.faLanguage\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\ARYO\\\\Documents\\\\ibisnis_react\\\\src\\\\components\\\\Header.jsx\",\n                                lineNumber: 59,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"select\", {\n                                name: \"\",\n                                className: \"border-0 text-gray-500\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                        value: \"\",\n                                        children: \"Language\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\ARYO\\\\Documents\\\\ibisnis_react\\\\src\\\\components\\\\Header.jsx\",\n                                        lineNumber: 61,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                        value: \"IND\",\n                                        children: \"Indonesia\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\ARYO\\\\Documents\\\\ibisnis_react\\\\src\\\\components\\\\Header.jsx\",\n                                        lineNumber: 62,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\ARYO\\\\Documents\\\\ibisnis_react\\\\src\\\\components\\\\Header.jsx\",\n                                lineNumber: 60,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\ARYO\\\\Documents\\\\ibisnis_react\\\\src\\\\components\\\\Header.jsx\",\n                        lineNumber: 58,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"p-2\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                            href: \"https://ibisnis.com/login\",\n                            className: \"border-2 border-red-500 rounded-lg text-red-500 px-3 py-2 mt-5\",\n                            children: \"Login\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\ARYO\\\\Documents\\\\ibisnis_react\\\\src\\\\components\\\\Header.jsx\",\n                            lineNumber: 66,\n                            columnNumber: 11\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\ARYO\\\\Documents\\\\ibisnis_react\\\\src\\\\components\\\\Header.jsx\",\n                        lineNumber: 65,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                        href: \"https://ibisnis.com/register\",\n                        className: \"bg-red-600 text-white px-6 py-4\",\n                        children: \"Get Invited\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\ARYO\\\\Documents\\\\ibisnis_react\\\\src\\\\components\\\\Header.jsx\",\n                        lineNumber: 73,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\ARYO\\\\Documents\\\\ibisnis_react\\\\src\\\\components\\\\Header.jsx\",\n                lineNumber: 53,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\ARYO\\\\Documents\\\\ibisnis_react\\\\src\\\\components\\\\Header.jsx\",\n        lineNumber: 21,\n        columnNumber: 5\n    }, this);\n}\n_c = Header;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Header);\nvar _c;\n$RefreshReg$(_c, \"Header\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9IZWFkZXIuanN4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFnRDtBQUNqQjtBQUNrQztBQUl0QjtBQUNNO0FBQ1c7QUFDUztBQUVyRSxTQUFTVSxTQUFTO0lBRWQsSUFBTUMsZUFBZUYsb0ZBQWtCQSxDQUNuQyw2Q0FDQTtRQUNFRyxZQUFZO0lBQ2Q7SUFFTixxQkFDRSw4REFBQ0M7UUFBSUMsV0FBVTs7MEJBQ2IsOERBQUNEO2dCQUFJQyxXQUFVOztrQ0FDYiw4REFBQ0Q7d0JBQUlDLFdBQVU7a0NBQ2IsNEVBQUNYLG1EQUFLQTs0QkFDSlksT0FBTTs0QkFDTkMsUUFBTzs0QkFDUEMsS0FBS1Ysb0VBQUlBOzRCQUNUVyxLQUFJOzs7Ozs7Ozs7OztrQ0FHUiw4REFBQ0w7d0JBQUlDLFdBQVU7a0NBQ2IsNEVBQUNYLG1EQUFLQTs0QkFDSlcsV0FBVTs0QkFDVkMsT0FBTTs0QkFDTkMsUUFBTzs0QkFDUEMsS0FBS1QsdUVBQVlBOzRCQUNqQlUsS0FBSTs7Ozs7Ozs7Ozs7a0NBR1IsOERBQUNMO3dCQUFJQyxXQUFVOzswQ0FDYiw4REFBQ0s7Z0NBQ0NMLFdBQVU7Z0NBQ1ZNLE1BQUs7Z0NBQ0xDLE1BQUs7Z0NBQ0xDLElBQUc7Z0NBQ0hDLGFBQVk7Ozs7OzswQ0FFZCw4REFBQ1Y7Z0NBQUlDLFdBQVU7MENBQ2IsNEVBQUNWLDJFQUFlQTtvQ0FBQ29CLE1BQU1uQix1RUFBUUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzBCQUlyQyw4REFBQ1E7Z0JBQUlDLFdBQVU7O2tDQUNiLDhEQUFDVzt3QkFBT0osTUFBSzt3QkFBR0MsSUFBRzt3QkFBR1IsV0FBVTs7MENBQzlCLDhEQUFDWTtnQ0FBT0MsT0FBTTswQ0FBVzs7Ozs7OzBDQUN6Qiw4REFBQ0Q7Z0NBQU9DLE9BQU07MENBQVU7Ozs7Ozs7Ozs7OztrQ0FFMUIsOERBQUNkO3dCQUFJQyxXQUFVOzswQ0FDYiw4REFBQ1YsMkVBQWVBO2dDQUFDb0IsTUFBTWxCLHlFQUFVQTs7Ozs7OzBDQUNqQyw4REFBQ21CO2dDQUFPSixNQUFLO2dDQUFHUCxXQUFVOztrREFDeEIsOERBQUNZO3dDQUFPQyxPQUFNO2tEQUFHOzs7Ozs7a0RBQ2pCLDhEQUFDRDt3Q0FBT0MsT0FBTTtrREFBTTs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tDQUd4Qiw4REFBQ2Q7d0JBQUlDLFdBQVU7a0NBQ2IsNEVBQUNjOzRCQUNDQyxNQUFLOzRCQUNMZixXQUFVO3NDQUNYOzs7Ozs7Ozs7OztrQ0FJSCw4REFBQ2M7d0JBQ0NDLE1BQUs7d0JBQ0xmLFdBQVU7a0NBQ1g7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQU1UO0tBdEVTSjtBQXVFVCwrREFBZUEsTUFBTUEsRUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvY29tcG9uZW50cy9IZWFkZXIuanN4PzNjYjYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7dXNlU3RhdGUsIHVzZUVmZmVjdH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCBJbWFnZSBmcm9tICduZXh0L2ltYWdlJztcclxuaW1wb3J0IHsgRm9udEF3ZXNvbWVJY29uIH0gZnJvbSBcIkBmb3J0YXdlc29tZS9yZWFjdC1mb250YXdlc29tZVwiO1xyXG5pbXBvcnQge1xyXG4gIGZhU2VhcmNoLFxyXG4gIGZhTGFuZ3VhZ2VcclxufSBmcm9tIFwiQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zXCI7XHJcbmltcG9ydCBsb2dvIGZyb20gJy4uL2Fzc2V0cy9pbWFnZXMvaWNvbi1sb2dvLnBuZydcclxuaW1wb3J0IGxvZ29faWJpc25pcyBmcm9tICcuLi9hc3NldHMvaW1hZ2VzL2xvZ28taWJpc25pcy5wbmcnXHJcbmltcG9ydCB7IGluc3RhbnRNZWlsaVNlYXJjaCB9IGZyb20gJ0BtZWlsaXNlYXJjaC9pbnN0YW50LW1laWxpc2VhcmNoJ1xyXG5cclxuZnVuY3Rpb24gSGVhZGVyKCkge1xyXG5cclxuICAgIGNvbnN0IHNlYXJjaENsaWVudCA9IGluc3RhbnRNZWlsaVNlYXJjaChcclxuICAgICAgICAnaHR0cHM6Ly9pbnRlZ3JhdGlvbi1kZW1vcy5tZWlsaXNlYXJjaC5jb20nLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHByaW1hcnlLZXk6ICdpZCdcclxuICAgICAgICB9XHJcbiAgICAgIClcclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJmaXhlZCB6LTIwIGZsZXgganVzdGlmeS1iZXR3ZWVuIHRvcC0wIGxlZnQtMCB3LWZ1bGwgYmctd2hpdGUgc2hhZG93LW1kXCI+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBqdXN0aWZ5LWJldHdlZW4gdy1mdWxsIGxnOmp1c3RpZnktc3RhcnQgbGc6dy1hdXRvXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwci0yXCI+XHJcbiAgICAgICAgICA8SW1hZ2VcclxuICAgICAgICAgICAgd2lkdGg9XCI1NVwiXHJcbiAgICAgICAgICAgIGhlaWdodD1cIjU1XCJcclxuICAgICAgICAgICAgc3JjPXtsb2dvfVxyXG4gICAgICAgICAgICBhbHQ9XCJcIlxyXG4gICAgICAgICAgLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInAtMlwiPlxyXG4gICAgICAgICAgPEltYWdlXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cIm10LTNcIlxyXG4gICAgICAgICAgICB3aWR0aD1cIjcwXCJcclxuICAgICAgICAgICAgaGVpZ2h0PVwiNzBcIlxyXG4gICAgICAgICAgICBzcmM9e2xvZ29faWJpc25pc31cclxuICAgICAgICAgICAgYWx0PVwiXCJcclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwLTIgZmxleCBpdGVtcy1jZW50ZXIgbXgtMyBib3JkZXItY3lhbi0xMDAgcm91bmRlZC1tZFwiPlxyXG4gICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImhpZGRlbiBsZzpibG9jayBib3JkZXIteS0yIGJvcmRlci1sLTIgYm9yZGVyLXItMiBib3JkZXItZ3JheS0yMDAgcHktMSBweC0zIHJvdW5kZWQtbC1sZyBhYnNvbHV0ZSBsZzpyZWxhdGl2ZSBsZzpib3JkZXItci0wXCJcclxuICAgICAgICAgICAgdHlwZT1cInNlYXJjaFwiXHJcbiAgICAgICAgICAgIG5hbWU9XCJcIlxyXG4gICAgICAgICAgICBpZD1cIlwiXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiU2VhcmNoIEtleXdvcmRcIlxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGc6Ym9yZGVyLXktMiBsZzpib3JkZXItci0yIGxnOmJvcmRlci1ncmF5LTIwMCBwLTEgcHgtMiByb3VuZGVkLXItbGdcIj5cclxuICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYVNlYXJjaH0gLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJoaWRkZW4gbGc6ZmxleCBsZzppdGVtcy1jZW50ZXJcIj5cclxuICAgICAgICA8c2VsZWN0IG5hbWU9XCJcIiBpZD1cIlwiIGNsYXNzTmFtZT1cImJvcmRlci0wIG14LTNcIj5cclxuICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJTdXJhYmF5YVwiPlN1cmFiYXlhPC9vcHRpb24+XHJcbiAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiSmFrYXJ0YVwiPkpha2FydGE8L29wdGlvbj5cclxuICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtZ3JheS01MDAgbXgtM1wiPlxyXG4gICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUxhbmd1YWdlfSAvPlxyXG4gICAgICAgICAgPHNlbGVjdCBuYW1lPVwiXCIgY2xhc3NOYW1lPVwiYm9yZGVyLTAgdGV4dC1ncmF5LTUwMFwiPlxyXG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+TGFuZ3VhZ2U8L29wdGlvbj5cclxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIklORFwiPkluZG9uZXNpYTwvb3B0aW9uPlxyXG4gICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwLTJcIj5cclxuICAgICAgICAgIDxhXHJcbiAgICAgICAgICAgIGhyZWY9XCJodHRwczovL2liaXNuaXMuY29tL2xvZ2luXCJcclxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiYm9yZGVyLTIgYm9yZGVyLXJlZC01MDAgcm91bmRlZC1sZyB0ZXh0LXJlZC01MDAgcHgtMyBweS0yIG10LTVcIlxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICBMb2dpblxyXG4gICAgICAgICAgPC9hPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxhXHJcbiAgICAgICAgICBocmVmPVwiaHR0cHM6Ly9pYmlzbmlzLmNvbS9yZWdpc3RlclwiXHJcbiAgICAgICAgICBjbGFzc05hbWU9XCJiZy1yZWQtNjAwIHRleHQtd2hpdGUgcHgtNiBweS00XCJcclxuICAgICAgICA+XHJcbiAgICAgICAgICBHZXQgSW52aXRlZFxyXG4gICAgICAgIDwvYT5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59XHJcbmV4cG9ydCBkZWZhdWx0IEhlYWRlciJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwiSW1hZ2UiLCJGb250QXdlc29tZUljb24iLCJmYVNlYXJjaCIsImZhTGFuZ3VhZ2UiLCJsb2dvIiwibG9nb19pYmlzbmlzIiwiaW5zdGFudE1laWxpU2VhcmNoIiwiSGVhZGVyIiwic2VhcmNoQ2xpZW50IiwicHJpbWFyeUtleSIsImRpdiIsImNsYXNzTmFtZSIsIndpZHRoIiwiaGVpZ2h0Iiwic3JjIiwiYWx0IiwiaW5wdXQiLCJ0eXBlIiwibmFtZSIsImlkIiwicGxhY2Vob2xkZXIiLCJpY29uIiwic2VsZWN0Iiwib3B0aW9uIiwidmFsdWUiLCJhIiwiaHJlZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/Header.jsx\n"));

/***/ })

});